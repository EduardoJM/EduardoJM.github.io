{"searchDocs":[{"title":"Estilo Arquitetural","type":0,"sectionRef":"#","url":"/docs/arquitetura/estilo-arquitetural","content":"Estilo Arquitetural Estilo Arquitetural descreve uma relação, nomeada, de componentes cobrindo uma variedade de características da arquitetura. O nome de um estilo arquitetural, cria um nome único que funciona como uma abreviatura entre arquitetos experientes. Cada nome captura os detalhes daquela arquitetura. Um estilo arquitetural descreve a topologia, as características padrão da arquitetura (benéficas ou prejudiciais). Referência Fundamentas of Software Architecture - Capítulo 9 - Mark Richards e Neal Ford.","keywords":"","version":"Next"},{"title":"Django-Rest-Framework e a API de models do Django","type":0,"sectionRef":"#","url":"/docs/django/rest-framework-and-django-models","content":"Django-Rest-Framework e a API de models do Django O django-rest-framework possui serializers que se integram muito bem com os models do django, mas é importante ressaltar que o objetivo do rest-framework não é funcionar (e suportar) do mesmo modo a api de models do django e, portanto, algumas funcionalidades &quot;padrão&quot; podem se perder. Um exemplo disso, relatado em Issue #7159 no GitHub é o método clean() dentro do model. from django.core.exceptions import ValidationError from django.db import models from rest_framework import serializers from django import forms from django.test import TestCase class Sample(models.Model): title = models.CharField(max_length=50) def clean(self): raise ValidationError('') class SampleSerializer(serializers.ModelSerializer): class Meta: model = Sample fields = '__all__' class SampleForm(forms.ModelForm): class Meta: model = Sample fields = &quot;__all__&quot; class SampleTests(TestCase): def test_form(self): form = SampleForm({&quot;title&quot;: &quot;test&quot;}) self.assertFalse(form.is_valid()) def test_serializer(self): serializer = SampleSerializer(data={&quot;title&quot;: &quot;test&quot;}) self.assertFalse(serializer.is_valid()) ","keywords":"","version":"Next"},{"title":"Correlação","type":0,"sectionRef":"#","url":"/docs/estatistica/correlacao","content":"Correlação É uma medida adimensional que está entre −1-1−1 e 111 e mede a relação entre duas variáveis; Correlação Positiva Uma correlação positiva indica relacionamento diretamente proporcional, ou seja: quando o valor de uma variável aumenta, o da outra também. Correlação Negativa Uma correlação positiva indica relacionamento inversamente proporcional, ou seja: quando o valor de uma variável aumenta, o da outra diminui.","keywords":"","version":"Next"},{"title":"Estatística Descritiva vs Inferência Estatística","type":0,"sectionRef":"#","url":"/docs/estatistica/inferencia-vs-descritiva","content":"Estatística Descritiva vs Inferência Estatística Estatística Descritiva Trata da organização, resumo e análise dos dados. Estatística Inferencial Estatística Inferencial ou Inferência Estatística trabalha obtendo conclusões sobre a população a partir da amostra.","keywords":"","version":"Next"},{"title":"Acessibilidade e font-size","type":0,"sectionRef":"#","url":"/docs/front-end/accessibility-font-size","content":"","keywords":"","version":"Next"},{"title":"Referências​","type":1,"pageTitle":"Acessibilidade e font-size","url":"/docs/front-end/accessibility-font-size#referências","content":" Don’t use rem/em for paddings, margins and more ","version":"Next","tagName":"h2"},{"title":"Sobre","type":0,"sectionRef":"#","url":"/docs/intro","content":"Sobre TODO: escrever aqui Introdução Esse é uma seção de anotações sobre diversos temas de estudo na área de tecnologia, ciências e matemática.","keywords":"","version":"Next"},{"title":"Introdução aos Micro Front-End's","type":0,"sectionRef":"#","url":"/docs/micro-front-end/introduction-to-micro-front-end","content":"","keywords":"","version":"Next"},{"title":"Características​","type":1,"pageTitle":"Introdução aos Micro Front-End's","url":"/docs/micro-front-end/introduction-to-micro-front-end#características","content":" A arquitetura de micro front-ends traz uma ideia parecida com microserviços para o front-end, com algumas características:  Maior independência entre os módulos;Arquitetura mais agnóstica a frameworks;Lógica pulverizada em vários projetos;Pipeline de build, test e deploys mais rápida;Assim como a arquitetura de micro serviços, adiciona uma complexidade a mais no projeto.  Os micro front-ends podem ser definidos, em [1], como:  &quot;An architectural style where independently deliverable frontend applications are composed into a greater whole&quot;    ","version":"Next","tagName":"h2"},{"title":"Exemplo Ilustrado​","type":1,"pageTitle":"Introdução aos Micro Front-End's","url":"/docs/micro-front-end/introduction-to-micro-front-end#exemplo-ilustrado","content":" Wireframe\tMicro front-end\t    ","version":"Next","tagName":"h2"},{"title":"Micro front-end's devem ter:​","type":1,"pageTitle":"Introdução aos Micro Front-End's","url":"/docs/micro-front-end/introduction-to-micro-front-end#micro-front-ends-devem-ter","content":" Baixo ou nenhum acoplamento entre os micro front-ends;Alta coesão;Não deve assumir responsabilidades de outro micro front-end;Não deve interferir ou ser interferido por outro micro front-end;Base de código independente;Pipeline de build, test e deploy separados e independentes.Times autônomos.    Pipeline de build, test e deploy separados e independentes      Times autônomos  ","version":"Next","tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Introdução aos Micro Front-End's","url":"/docs/micro-front-end/introduction-to-micro-front-end#referências","content":" Micro Frontends ","version":"Next","tagName":"h2"},{"title":"Eficiência","type":0,"sectionRef":"#","url":"/docs/ux/avaliacao/eficiencia","content":"Eficiência Algumas avaliações que são relacionadas a eficiência são: medições de tempo (tempo de realização da tarefa, tempo até o erro, etc);taxa de entrada de dados;quantidade de informações acessadas;frequência de uso;desvios da solução ótima.","keywords":"","version":"Next"},{"title":"Heurísticas","type":0,"sectionRef":"#","url":"/docs/ux/avaliacao/heuristicas","content":"Heurísticas O fluxo para uma avaliação com o uso de heurísticas é: Se familiarize com a lista de heurísticas.Se familiarize com a interface que vai ser avaliada.Crie uma lista de tarefas.Execute cada uma das tarefas.Avalie a interface de acordo com a lista de heurísticas.Classifique o problema de acordo com a severidade.Faça um relatório.","keywords":"","version":"Next"},{"title":"Percurso Cognitivo","type":0,"sectionRef":"#","url":"/docs/ux/avaliacao/percurso-cognitivo","content":"Percurso Cognitivo Parte do principio de que o usuário aprende a usar o produto através da exploração e não lendo manuais. Assim, é interessante para descobrir se uma interface é fácil de aprender. Trabalha com histórias de sucesso e histórias de falha. Algumas perguntas sugeridas para identificar sucesso e falha são: sendo honesto, o usuário vai tentar realizar esta ação?os controles para executar esta ação estão visíveis?há um link evidente e forte entre estes controles e a ação?o feedback é fornecido?","keywords":"","version":"Next"},{"title":"Lei de Fitt's","type":0,"sectionRef":"#","url":"/docs/ux/lei-de-fitts","content":"Lei de Fitt's A lei de Fitt's afirma que o tempo necessário para executar uma ação é uma função da distância e tamanho do componente. Quanto maior a distância e menor o tamanho do componente, mais tempo leva para que a ação seja executada.","keywords":"","version":"Next"},{"title":"O que é Usabilidade?","type":0,"sectionRef":"#","url":"/docs/ux/o-que-e-usabilidade","content":"O que é Usabilidade? Segundo a ISO 9241-11, usabilidade é o quanto um produto pode ser utilizado por um determinado usuário para atingir um determinado objetivo com eficiência, eficácia e satisfação em determinado contexto de uso. Assim é preciso: definir um usuário;definir um contexto de uso;definir uma tarefa. Outros pontos que precisam ser definidos: Eficiência Realização da tarefa sem erros Eficácia Realização da tarefa com otimização dos recursos disponíveis. Satisfação O quanto as expectativas são alcançadas.","keywords":"","version":"Next"},{"title":"Formas de Implementação de Micro Front-End's","type":0,"sectionRef":"#","url":"/docs/micro-front-end/implementations-of-micro-front-end","content":"","keywords":"","version":"Next"},{"title":"Implementação em tempo de build​","type":1,"pageTitle":"Formas de Implementação de Micro Front-End's","url":"/docs/micro-front-end/implementations-of-micro-front-end#implementação-em-tempo-de-build","content":" Usar diversos projetos, por exemplo no npm, integrados por um projeto maior. Por exemplo, no package.json:  { &quot;name&quot;: &quot;@my-project/main&quot;, // ... &quot;dependencies&quot;: { &quot;@my-project/frontend-1&quot;: &quot;1.0.0&quot;, &quot;@my-project/frontend-2&quot;: &quot;1.0.0&quot;, &quot;@my-project/frontend-3&quot;: &quot;1.0.0&quot; } }   Um problema disso é que as pipelines de build, test e deploy não são separados e independentes.  ","version":"Next","tagName":"h2"},{"title":"Integração por meio de funções javascript​","type":1,"pageTitle":"Formas de Implementação de Micro Front-End's","url":"/docs/micro-front-end/implementations-of-micro-front-end#integração-por-meio-de-funções-javascript","content":" A ideia, dentro dessa forma de trabalho, é ter vários scripts (bundles) que disponibilizam funções para renderizar aquele micro front-end e, ter um script principal que gerencia chamada para essas funções. Um exemplo disso é:  &lt;script src=&quot;https://browse.example.com/bundle.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://order.example.com/bundle.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://profile.example.com/bundle.js&quot;&gt;&lt;/script&gt; &lt;div id=&quot;micro-frontend-root&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; const microFrontEndsByRoute = { '/': window.renderBrowseRestaurants, '/order-food': window.renderOrderFood, '/user-profile': window.renderUserProfile, }; const renderFunction = microFrontendsByRoute[window.location.pathname]; renderFunction('micro-frontend-root'); &lt;/script&gt;   ","version":"Next","tagName":"h2"},{"title":"Integração através de web components​","type":1,"pageTitle":"Formas de Implementação de Micro Front-End's","url":"/docs/micro-front-end/implementations-of-micro-front-end#integração-através-de-web-components","content":" A estratégia para essa abordagem é definir web components nativos do browser para os micro front-ends:  &lt;!-- /about --&gt; &lt;div id=&quot;container&quot;&gt; &lt;about-micro-frontend&gt;&lt;/about-micro-frontend&gt; &lt;/div&gt;   &lt;!-- /products --&gt; &lt;div id=&quot;container&quot;&gt; &lt;products-micro-frontend&gt;&lt;/products-micro-frontend&gt; &lt;/div&gt;   Ao utilizar web components para criar micro front-ends, é possível utilizar qualquer uma das duas abordagens anteriores para executar os componentes.  ","version":"Next","tagName":"h2"},{"title":"Integração via iframes​","type":1,"pageTitle":"Formas de Implementação de Micro Front-End's","url":"/docs/micro-front-end/implementations-of-micro-front-end#integração-via-iframes","content":" &lt;!-- /about --&gt; &lt;div id=&quot;container&quot;&gt; &lt;iframe src=&quot;https://about.example.com&quot;&gt;&lt;/iframe&gt; &lt;/div&gt;   &lt;!-- /products --&gt; &lt;div id=&quot;container&quot;&gt; &lt;iframe src=&quot;https://products.example.com&quot;&gt;&lt;/iframe&gt; &lt;/div&gt;   ","version":"Next","tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Formas de Implementação de Micro Front-End's","url":"/docs/micro-front-end/implementations-of-micro-front-end#referências","content":" Micro Frontends ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}