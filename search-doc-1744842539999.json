{"searchDocs":[{"title":"Django, Htmx e React: usando HTMX para além de TODO-Lists","type":0,"sectionRef":"#","url":"/blog/django-htmx-react-alem-de-todo-lists","content":"","keywords":"","version":null},{"title":"Conteúdos ​","type":1,"pageTitle":"Django, Htmx e React: usando HTMX para além de TODO-Lists","url":"/blog/django-htmx-react-alem-de-todo-lists#conteúdos-","content":" ConteúdosIntroduçãoContextualização da Plataforma AtualEntendendo o ProblemaPor que HTMX se já usávamos React?Questões técnicasComunicação entre HTMX e ReactConfirmação para execução de açõesComo é que isso ai funciona?E o futuro?  ","version":null,"tagName":"h2"},{"title":"Introdução ​","type":1,"pageTitle":"Django, Htmx e React: usando HTMX para além de TODO-Lists","url":"/blog/django-htmx-react-alem-de-todo-lists#introdução-","content":" Em uma demanda de um dos projetos em que atuo, precisávamos de uma funcionalidade para a qual o uso do HTMX se encaixaria perfeitamente e esse texto tem como objetivo levantar questões pelas quais foi decidido o uso do HTMX e não de outras ferramentas e elucidar como foram feitas integrações entre Django, HTMX e React para construir ferramentas reais.  O título é uma inspiração de um tweet que vi, alguns dias atrás, que questionava se alguém estava utilizando o HTMX para algo mais além de criar TODO-Lists.  ","version":null,"tagName":"h2"},{"title":"Contextualização da Plataforma Atual ​","type":1,"pageTitle":"Django, Htmx e React: usando HTMX para além de TODO-Lists","url":"/blog/django-htmx-react-alem-de-todo-lists#contextualização-da-plataforma-atual-","content":" O back-end do projeto utiliza o Django com Django-Rest-Framework para servir uma API de integração para um app mobile e, para gerenciamento dos conteúdos, o Django-Admin é utilizado.  O django-admin possuí, nas páginas de formulário, uma estrutura parecida com a seguinte: um cabeçalho ocupado toda a largura da página, e logo a baixo uma sidebar e o conteúdo principal, que no caso é um formulário.    Em alguns formulários, a estrutura e arquitetura de informação dos models demandava um controle de carregamento e de exibição de itens complexo usando lazy-loading. Desse modo, quando o ferramental do django e do django-admin deixou de suprir as necessidades, parte desses formulários foi construída utilizando aplicações pequenas com React.  Essas aplicações React que eram carregadas apenas em páginas específicas não demandavam, por exemplo, o uso de routers e coisas do tipo.  ","version":null,"tagName":"h2"},{"title":"Entendendo o Problema ​","type":1,"pageTitle":"Django, Htmx e React: usando HTMX para além de TODO-Lists","url":"/blog/django-htmx-react-alem-de-todo-lists#entendendo-o-problema-","content":" O painel de administração é utilizado para algo próximo a um CMS (content management system) para um app de idiomas. Durante a criação de algumas &quot;entidades&quot; dentro da plataforma, seria necessário uma ferramenta, em popup, para consultar as &quot;entidades&quot; já cadastradas, pois esse processo atualmente era gerenciado com planilhas externas, aumentando a complexidade no uso do painel.  Essa mesma ferramenta deveria, também, fornecer a opção de clonar entidades para a página em que se estava trabalhando (alternado a entidade paí/chave estrangeira).  ","version":null,"tagName":"h2"},{"title":"Por que HTMX se já usávamos React? ​","type":1,"pageTitle":"Django, Htmx e React: usando HTMX para além de TODO-Lists","url":"/blog/django-htmx-react-alem-de-todo-lists#por-que-htmx-se-já-usávamos-react-","content":" Quando começamos a avaliar a funcionalidade, a primeira discussão foi: será que o HTMX se encaixa bem aqui? ou será melhor lidar com React?  Um dos principais pontos levados em consideração: a estrutura do django e do django-admin já trazia uma quantidade enorme de código e funcionalidades que poderiam ser reutilizadas para a exibição, como paginação, etc. na aplicação react que roda nessa aplicação não lidava com paginação nem com diversas outras coisas que demandaria muito mais tempo para implementar que utilizando partes dos templates do django-admin adaptados.  Como essa funcionalidade não seria, sempre, inserida nas mesmas páginas que o formulário react, haveria muito trabalho pra conciliar o uso do react, bundlers, etc.  Esse conjunto de fatores foram os principais motivantes para a adoção do HTMX, que diferente do react que teriamos que lidar com bundler, só importamos o script onde fosse necessário utilizar as tags do HTMX.  A simplicidade que o HTMX trouxe para essa implementação, talvez tivesse sido utilizada no lugar do react se a conhecêssemos na época.  ","version":null,"tagName":"h2"},{"title":"Questões técnicas ​","type":1,"pageTitle":"Django, Htmx e React: usando HTMX para além de TODO-Lists","url":"/blog/django-htmx-react-alem-de-todo-lists#questões-técnicas-","content":" Algumas questões que foram foco dos esforços no trabalho com essa funcionalidade serão tratadas nessa seção. Essas questões não foram, necessariamente, complexas ou problemáticas. São apenas pontos aos quais gostaria de comentar.  ","version":null,"tagName":"h2"},{"title":"Comunicação entre HTMX e React ​","type":1,"pageTitle":"Django, Htmx e React: usando HTMX para além de TODO-Lists","url":"/blog/django-htmx-react-alem-de-todo-lists#comunicação-entre-htmx-e-react-","content":" Como comentado, em algum lugar no texto acima, era necessário clonar itens para o formulário atual. Formulário esse, construído em React. Assim, ao integrar uma ação para clonar o item, utilizando o hx-post, é necessário que algum trigger seja disparado para que alguma parte da app React possa processar.  Um detalhe, ao qual não vou adentrar aqui, é que esses &quot;links&quot; para ações estão dentro de um formulário, então na chamada para o hx-post todos os campos do formulário também são enviados.  &lt;span hx-post=&quot;/admin/my-action&quot; hx-trigger=&quot;confirmed&quot; hx-indicator=&quot;.htmx-indicator&quot; title=&quot;Clonar&quot; &gt; ... &lt;/span&gt;   O hx-trigger=&quot;confirmed&quot; se deve a seção abaixo, onde tratamos sobre a confirmação para a execução da ação. Fora isso, no lado do servidor, utilizando django-htmx podemos inserir uma header HX-Trigger para disparar um trigger quando a ação do HTMX for finalizada:  def my_view(request): ... response = render(request, 'my_template.html', my_context) resp.headers['HX-Trigger'] = 'completeClone' return resp   Dentro do cliente react podemos adicionar o evento ao document devido ao event bubbling:  useEffect(() =&gt; { const fetch = async () =&gt; { ... } document.addEventListener('completeClone', fetch); return () =&gt; { document.removeEventListener('completeClone', fetch); } }, []);   ","version":null,"tagName":"h3"},{"title":"Confirmação para execução de ações ​","type":1,"pageTitle":"Django, Htmx e React: usando HTMX para além de TODO-Lists","url":"/blog/django-htmx-react-alem-de-todo-lists#confirmação-para-execução-de-ações-","content":" Para exibir confirmações de execução das ações, utilizamos a biblioteca SweetAlert2, que já estava no projeto pra ser utilizada em alguns outros momentos:  function confirmClone(element, title) { text = 'Deseja clonar o item &lt;strong&gt;&quot;' + title + '&quot;&lt;/strong&gt;? Essa ação não poderá ser desfeita!'; Swal.fire({ title: 'Tem certeza?', html: text, showCancelButton: true, confirmButtonText: 'Sim, Clonar', cancelButtonText: 'Cancelar', }).then(function (result) { if (!result.isConfirmed) { return; } htmx.trigger(element, 'confirmed'); }); }   A linha htmx.trigger(element, 'confirmed'); dispara o trigger que está no hx-trigger=&quot;confirmed&quot; do span. Aqui é preciso completar, também, a tag:  &lt;span hx-post=&quot;/admin/my-action&quot; hx-trigger=&quot;confirmed&quot; hx-indicator=&quot;.htmx-indicator&quot; onclick=&quot;confirmClone(this, 'título do item!!!!')&quot; title=&quot;Clonar&quot; &gt; ... &lt;/span&gt;   ","version":null,"tagName":"h3"},{"title":"Como é que isso ai funciona? ​","type":1,"pageTitle":"Django, Htmx e React: usando HTMX para além de TODO-Lists","url":"/blog/django-htmx-react-alem-de-todo-lists#como-é-que-isso-ai-funciona-","content":" A implementação com HTMX fluiu muito bem, mas em diversos momentos foi necessária muita experimentação por falta de clareza do que, exatamente, os comandos fazem ou como lidar para que eles fizessem exatamente o que queria.  Mas, esse pode ser uma skill issue do prazo e de ser a primeira vez utilizando a documentação, tanto que as duas seções acima foram fortemente baseadas pelos seus exemplos (mas não pela sua documentação).  ","version":null,"tagName":"h3"},{"title":"E o futuro? ​","type":1,"pageTitle":"Django, Htmx e React: usando HTMX para além de TODO-Lists","url":"/blog/django-htmx-react-alem-de-todo-lists#e-o-futuro-","content":" Bom, desenvolver uma funcionalidade real com HTMX foi uma experiência muito boa e creio que o projeto tem muito potêncial, apesar que em diversos momentos, a depender da estrutura e do tamanho do projeto, eu continue achando que uma API (Rest ou intent based) com um cliente front-end ainda seja mais simples de se manipular.  Ainda assim, espero ter mais chances de usar o HTMX integrado ao django-admin que é, fundamentalmente, server-side. ","version":null,"tagName":"h2"},{"title":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","type":0,"sectionRef":"#","url":"/blog/full-text-search-drf-postgres-django","content":"","keywords":"","version":null},{"title":"Mostre-me o código​","type":1,"pageTitle":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","url":"/blog/full-text-search-drf-postgres-django#mostre-me-o-código","content":" O código desenvolvido nesse texto está disponível no repositório django-full-text-search no Github.  Disclaimer: O código da versão desse texto está disponível na branch texto-2.    ","version":null,"tagName":"h2"},{"title":"Implementando o BaseFilterBackend​","type":1,"pageTitle":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","url":"/blog/full-text-search-drf-postgres-django#implementando-o-basefilterbackend","content":" Para criar o back-end de filtro, é preciso implementar a classe rest_framework.filters.BaseFilterBackend:  from rest_framework.filters import BaseFilterBackend class FullTextSearchFilter(BaseFilterBackend): pass   ","version":null,"tagName":"h2"},{"title":"Obtendo os parâmetros​","type":1,"pageTitle":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","url":"/blog/full-text-search-drf-postgres-django#obtendo-os-parâmetros","content":" Os primeiros métodos que serão implementados na classe acima são apenas métodos que buscam atributos na requisição, como o parâmetro ?search, ou no ModelViewSet como, por exemplo, o search_fields. Esse código é bem parecido com o da referência em [5]:  from rest_framework.filters import BaseFilterBackend from rest_framework.settings import api_settings class FullTextSearchFilter(BaseFilterBackend): search_param = api_settings.SEARCH_PARAM def get_config(self, view, request): return getattr(view, &quot;search_config&quot;, None) def get_search_fields(self, view, request): return getattr(view, &quot;search_fields&quot;, None) def get_similarity_threshold(self, view, request): return getattr(view, &quot;similarity_threshold&quot;, 0) def get_search_term(self, request): params = request.query_params.get(self.search_param, '') params = params.replace('\\x00', '') # strip null characters params = params.replace(',', ' ') return params   ","version":null,"tagName":"h3"},{"title":"Fazendo a Busca​","type":1,"pageTitle":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","url":"/blog/full-text-search-drf-postgres-django#fazendo-a-busca","content":" O método mais importante dessa classe é, sem dúvidas, o filter_queryset que é o método que faz as alterações em um queryset para devolver a resposta da API.  É preciso, antes de tudo, obter os parâmetros para fazer nossa busca, por meio dos métodos implementados acima:  def filter_queryset(self, request, queryset, view): search_fields = self.get_search_fields(view, request) search_term = self.get_search_term(request) config = self.get_config(view, request) threshold = self.get_similarity_threshold(view, request)   Um primeiro ponto, que deve ser levado em consideração, é que, caso a variável search_fields ou a search_term não esteja preenchida, podemos retornar o queryset sem fazer alteração:  def filter_queryset(self, request, queryset, view): # ... if not search_term or not search_fields: return queryset   O restante do método é bem parecido com o que já implementamos no texto anterior:  def filter_queryset(self, request, queryset, view): # ... search_vector = SearchVector(*search_fields, config=config) search_query = SearchQuery(search_term, config=config) queryset = queryset.annotate( search=search_vector, rank=SearchRank( search_vector, search_query, ), similarity=TrigramSimilarity(*search_fields, search_term), ).filter( Q(search=search_query) | Q(similarity__gt=threshold) ).order_by(&quot;-rank&quot;, &quot;-similarity&quot;) return queryset   Faz-se importante denotar que o search_fields aqui é usado como *search_fields para &quot;desconstruir&quot; o array. Assim, se search_fields = [&quot;name&quot;, &quot;description&quot;], a criação da instância SearchVector seria feita como SearchVector(&quot;name&quot;, &quot;description&quot;, config=config).  Por fim, a classe, completa, será:  class FullTextSearchFilter(BaseFilterBackend): search_param = api_settings.SEARCH_PARAM def get_config(self, view, request): return getattr(view, &quot;search_config&quot;, None) def get_search_fields(self, view, request): return getattr(view, &quot;search_fields&quot;, None) def get_similarity_threshold(self, view, request): return getattr(view, &quot;similarity_threshold&quot;, 0) def get_search_term(self, request): params = request.query_params.get(self.search_param, '') params = params.replace('\\x00', '') # strip null characters params = params.replace(',', ' ') return params def filter_queryset(self, request, queryset, view): search_fields = self.get_search_fields(view, request) search_term = self.get_search_term(request) config = self.get_config(view, request) threshold = self.get_similarity_threshold(view, request) if not search_term or not search_fields: return queryset search_vector = SearchVector(*search_fields, config=config) search_query = SearchQuery(search_term, config=config) queryset = queryset.annotate( search=search_vector, rank=SearchRank( search_vector, search_query, ), similarity=TrigramSimilarity(*search_fields, search_term), ).filter( Q(search=search_query) | Q(similarity__gt=threshold) ).order_by(&quot;-rank&quot;, &quot;-similarity&quot;) return queryset     ","version":null,"tagName":"h3"},{"title":"Usando o FullTextSearchFilter​","type":1,"pageTitle":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","url":"/blog/full-text-search-drf-postgres-django#usando-o-fulltextsearchfilter","content":" A classe FullTextSearchFilter pode ser utilizada nos filter_backends dos ModelViewSet do django-rest-framework. Simplificando:  from rest_framework import serializers from rest_framework.viewsets import ModelViewSet from texto.models import Singer from core.filters import FullTextSearchFilter class SingerSerializer(serializers.ModelSerializer): class Meta: model = Singer fields = &quot;__all__&quot; class SingerViewSet(ModelViewSet): queryset = Singer.objects.all() serializer_class = SingerSerializer filter_backends = [FullTextSearchFilter] search_config = &quot;portuguese&quot; search_fields = [&quot;name&quot;]   Ao registrar o SingerViewSet nas urls do projeto já é possível fazer chamadas para o endpoint utilizando o ?search como full-text search:  from django.urls import path, include from rest_framework.routers import SimpleRouter from .viewsets import SingerViewSet router = SimpleRouter() router.register(&quot;singer&quot;, SingerViewSet, &quot;Singer&quot;) urlpatterns = [ path('api/', include(router.urls)) ]       ","version":null,"tagName":"h2"},{"title":"Mostrando o Rank e Similarity no retorno da API​","type":1,"pageTitle":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","url":"/blog/full-text-search-drf-postgres-django#mostrando-o-rank-e-similarity-no-retorno-da-api","content":" É possível, inclusive, exibir os dados de rank e similarity no retorno da API. Como esses dados estão sendo anotados, i.e. acrescentados, na entidade, é possível, apenas, alterar o ModelSerializer:  class SingerSerializer(serializers.ModelSerializer): rank = serializers.FloatField(read_only=True) similarity = serializers.FloatField(read_only=True) class Meta: model = Singer fields = &quot;__all__&quot;     ","version":null,"tagName":"h2"},{"title":"Mas, e sem a busca?​","type":1,"pageTitle":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","url":"/blog/full-text-search-drf-postgres-django#mas-e-sem-a-busca","content":" Acrescentar, apenas, o rank e similarity no ModelSerializer traz um problema: quando o endpoint é chamado sem o ?search os dados de rank e similarity não são retornados:    Isso pode ser resolvido, acrescentando, no construtor do FloatField, o parâmetro default=0:  class SingerSerializer(serializers.ModelSerializer): rank = serializers.FloatField(read_only=True, default=0) similarity = serializers.FloatField(read_only=True, default=0) class Meta: model = Singer fields = &quot;__all__&quot;     ","version":null,"tagName":"h3"},{"title":"Filtrando por Similaridade​","type":1,"pageTitle":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","url":"/blog/full-text-search-drf-postgres-django#filtrando-por-similaridade","content":" Por fim, para filtrar por similaridade, é possível definir a variável similarity_threshold no ModelViewSet:  class SingerViewSet(ModelViewSet): queryset = Singer.objects.all() serializer_class = SingerSerializer filter_backends = [FullTextSearchFilter] search_config = &quot;portuguese&quot; search_fields = [&quot;name&quot;] similarity_threshold = 0.3       ","version":null,"tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","url":"/blog/full-text-search-drf-postgres-django#referências","content":" [1] Full-Text Search: Implementando com Postgres e Django  [2] A powerful full-text search in PostgreSQL in less than 20 lines  [3] django-full-text-search  [4] Filtering - SearchFilter  [5] rest_framework/filters.py    Foto de Capa por Douglas Lopes no Unsplash ","version":null,"tagName":"h2"},{"title":"HTMX: por que eu uso?","type":0,"sectionRef":"#","url":"/blog/htmx-por-que-eu-uso","content":"","keywords":"","version":null},{"title":"Conteúdos ​","type":1,"pageTitle":"HTMX: por que eu uso?","url":"/blog/htmx-por-que-eu-uso#conteúdos-","content":" ConteúdosIntroduçãoO que é o HTMX?Contexto e Motivos pela escolha 1. Template Engine2. Django-Admin3. Autenticação e Permissão4. Funcionalidades do Django5. Escopo Alguns contrapontosQuer dizer, então, que agora eu só uso HTMX?  ","version":null,"tagName":"h2"},{"title":"Introdução ​","type":1,"pageTitle":"HTMX: por que eu uso?","url":"/blog/htmx-por-que-eu-uso#introdução-","content":" Esse texto foi inspirado por uma publicação do Mario Souto (omariosouto) no twitter ao questionar sobre a quantidade de gente indicando HTMX recentemente e se essas pessoas estavam usando HTMX em produção.  O tweet pode ser visto abaixo:    Tenho trabalhado com HTMX (Django + HTMX, pra especificar a stack), inclusive em produção (Veja o texto Django, Htmx e React: usando HTMX para além de TODO-Lists) e resolvi escrever esse texto para elucidar o contexto e os motivos que me levaram a decisão de usá-lo.  ","version":null,"tagName":"h2"},{"title":"O que é o HTMX? ​","type":1,"pageTitle":"HTMX: por que eu uso?","url":"/blog/htmx-por-que-eu-uso#o-que-é-o-htmx-","content":" htmx gives you access to AJAX, CSS Transitions, WebSockets and Server Sent Events directly in HTML, using attributes, so you can build modern user interfaces with the simplicity and power of hypertext Home do htmx.org  Resumidamente, o HTMX é uma biblioteca JavaScript que permite que você use transições, faça requisições e coisas do tipo utilizando atributos HTML para construir interfaces modernas utilizando HTML (principalmente em servidores que renderizam HTML, como é o caso do Django).    ","version":null,"tagName":"h2"},{"title":"Contexto e Motivos pela escolha ​","type":1,"pageTitle":"HTMX: por que eu uso?","url":"/blog/htmx-por-que-eu-uso#contexto-e-motivos-pela-escolha-","content":" ","version":null,"tagName":"h2"},{"title":"1. Template Engine ​","type":1,"pageTitle":"HTMX: por que eu uso?","url":"/blog/htmx-por-que-eu-uso#1-template-engine-","content":" O Django é, por padrão, um framework que implementa um sistema de templates que devolve HTML para o navegador. Junto com o sistema de templates, existe um sistema de gerenciamento de arquivos estáticos.  Esse primeiro contexto é importante aqui pois ao utilizar a stack Django + HTMX, não é necessário implementar, adaptar ou configurar nenhum sistema de templates.  ","version":null,"tagName":"h3"},{"title":"2. Django-Admin ​","type":1,"pageTitle":"HTMX: por que eu uso?","url":"/blog/htmx-por-que-eu-uso#2-django-admin-","content":" O Django-Admin é uma aplicação (ou um módulo, por assim chamar), incluída junto a distribuição django e que fornece uma interface de administração fácil de ser utilizada para gerenciar os models criados dentro dos projetos.  A partir do item anterior, já é possível imaginar que o Django-Admin usa, fundamentalmente, templates HTML e renderização server-side (que devolve o HTML).  Em alguns casos, quando há a necessidade de alguma funcionalidade com maior dinamização dentro do django-admin é mais factível e rápido usar uma biblioteca que faça a ponte para o mesmo sistema de templates HTML que utilizar um framework ou biblioteca front-end, como o React.  ","version":null,"tagName":"h3"},{"title":"3. Autenticação e Permissão ​","type":1,"pageTitle":"HTMX: por que eu uso?","url":"/blog/htmx-por-que-eu-uso#3-autenticação-e-permissão-","content":" Assim como o conjunto de utilitários para o painel administrativo, o django traz por padrão um sistema de autenticação e permissões configurável e utilizar o HTMX remove a necessidade de inserir outros tipos de autenticação (como JWT amplamente usada para API's).  Outro ponto relevante sobre a autenticação e permissão é que ao utilizar o Django-Admin e uma aplicação Django padrão server-side, a autenticação entre ambiente de admin e aplicação é compartilhada de forma simples, já que, na prática, é o mesmo site.  ","version":null,"tagName":"h3"},{"title":"4. Funcionalidades do Django ​","type":1,"pageTitle":"HTMX: por que eu uso?","url":"/blog/htmx-por-que-eu-uso#4-funcionalidades-do-django-","content":" O Django possui facilitadores como sistema de formulários e widgets que se integram muito bem com a Template Engine e facilitam coisas como validar os dados e, consequentemente, armazenar no banco de dados.  ","version":null,"tagName":"h3"},{"title":"5. Escopo ​","type":1,"pageTitle":"HTMX: por que eu uso?","url":"/blog/htmx-por-que-eu-uso#5-escopo-","content":" Tudo o que descrevi acima foi bastante decisivo para a escolha do HTMX, mas, talvez, o que tenha sido mais decisivo foram os escopos das aplicações e funcionalidades onde o HTMX foi utilizado. São escopos onde os formulários são simples, não exigiam muitas manipulações ou validações. Não existem formulários com muita complexidade (por exemplo, um formulário de cadastro de cliente onde você pode adicionar vários dependentes no cadastro, etc.).  Mesmo que na maioria dos formulários complexos eu considere como falha de decisões, nem sempre essas decisões são dos devs.  Dados os motivos acima, ter conhecimento do framework de back-end / server-side ao qual se vai trabalhar, aliado ao HTMX, é importante para decidir se os requisitos dos formulários e outras necessidades podem, ou não, se tornar empecilhos.  ","version":null,"tagName":"h3"},{"title":"Alguns contrapontos ​","type":1,"pageTitle":"HTMX: por que eu uso?","url":"/blog/htmx-por-que-eu-uso#alguns-contrapontos-","content":" Nem tudo são flores.  Em algumas situações é difícil fazer o que se quer fazer com a biblioteca, principalmente pela baixa quantidade, atualmente, de conteúdos.  Assim como em framework's front-end, como o react, lidar com redirecionamento de URL's pode ser bastante complexo, por exemplo pra preservar filtros em requisições via HTMX.  Existem algumas complexidades com que eu preciso lidar que eu, no atual momento, não transfiro essa responsabilidade ao HTMX e, portanto, não irei listá-las aqui.  ","version":null,"tagName":"h2"},{"title":"Quer dizer, então, que agora eu só uso HTMX? ​","type":1,"pageTitle":"HTMX: por que eu uso?","url":"/blog/htmx-por-que-eu-uso#quer-dizer-então-que-agora-eu-só-uso-htmx-","content":" Bem, não. Por mais que eu tenha gostado bastante do desenvolvimento com o HTMX integrado ao Django, uso em poucos projetos e, na maioria das vezes, não é a única forma de dinamização das páginas (em alguns casos é preciso utilizar bastante JavaScript Vanilla ou outras bibliotecas como o React).  Além disso, algumas aplicações com as quais trabalho continuam sendo feitas com API's Rest usando JSON e front-end's como SPA's.  Tudo depende da análise dos pontos listados acima e de contextos das necessidades do negócio, se o projeto já está em andamento, se existe time, se é um projeto que farei sozinho como freelancer, dentre outras questões. ","version":null,"tagName":"h2"},{"title":"Full-Text Search: Implementando com Postgres e Django","type":0,"sectionRef":"#","url":"/blog/full-text-search-postgres-django","content":"","keywords":"","version":null},{"title":"Mostre-me o código​","type":1,"pageTitle":"Full-Text Search: Implementando com Postgres e Django","url":"/blog/full-text-search-postgres-django#mostre-me-o-código","content":" Todo o código-fonte do projeto está disponível no GitHub, nesse repositório.  Disclaimer: O código da versão desse texto está disponível na branch texto-1.    ","version":null,"tagName":"h2"},{"title":"Adicionando configurações necessárias​","type":1,"pageTitle":"Full-Text Search: Implementando com Postgres e Django","url":"/blog/full-text-search-postgres-django#adicionando-configurações-necessárias","content":" Dentro do settings.py do projeto, precisamos adicionar a aplicação django.contrib.postgres dentro da variável de INSTALLED_APPS para que possamos utilizar as ferramentas do django próprias para o Postgres:  # ... INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.postgres', ] # ...   ","version":null,"tagName":"h2"},{"title":"Criando o model​","type":1,"pageTitle":"Full-Text Search: Implementando com Postgres e Django","url":"/blog/full-text-search-postgres-django#criando-o-model","content":" Precisamos criar um model para poder utilizar os conceitos da busca dentro dele. Para simplificar, esse caso, utilizamos um model com um único campo de texto para as buscas:  class Singer(models.Model): name = models.CharField(&quot;Cantor&quot;, max_length=150) def __str__(self): return self.name class Meta: verbose_name = &quot;Cantor&quot; verbose_name_plural = &quot;Cantores&quot;   ","version":null,"tagName":"h2"},{"title":"Criando uma view​","type":1,"pageTitle":"Full-Text Search: Implementando com Postgres e Django","url":"/blog/full-text-search-postgres-django#criando-uma-view","content":" Para testar os conceitos de full-text search, podemos criar uma view. Antes, é necessário dizer que nesse texto estou usando views padrão do django com templates em HTML para não adicionar mais complexidade lidando com o Rest Framework.  Podemos criar uma view que recebe uma query string para fazer a busca:  from django.shortcuts import render from .models import Singer def search_singer(request): term = request.GET.get('q') if term: # TODO: fazer busca aqui else: singers = Singer.objects.order_by(&quot;-id&quot;).all() context = { 'singers': singers, 'term': term, } return render(request, &quot;cantor.html&quot;, context)   O template cantor.html que estou utilizando é bem simples apenas para permitir testes de forma mais fácil:  &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Buscando Cantores&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;form action=&quot;&quot;&gt; &lt;input name=&quot;q&quot; {% if term %} value=&quot;{{ term }}&quot; {% endif %} /&gt; &lt;button type=&quot;submit&quot;&gt;Pesquisar&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; {% if singers %} &lt;main&gt; {% for item in singers %} &lt;div&gt; &lt;h3&gt;{{item.name}}&lt;/h3&gt; {% if item.rank or item.similarity %} &lt;div&gt;Rank: {{item.rank}}, Similaridade: {{item.similarity}}&lt;/div&gt; {% endif %} &lt;/div&gt; {% endfor %} &lt;/main&gt; {% endif %} &lt;/body&gt; &lt;/html&gt;   ","version":null,"tagName":"h2"},{"title":"Full-Text Search​","type":1,"pageTitle":"Full-Text Search: Implementando com Postgres e Django","url":"/blog/full-text-search-postgres-django#full-text-search","content":" Precisamos, primeiro, criar um SearchVector (ts_vector) e um SearchQuery (tsquery). Assim:  from django.contrib.postgres.search import SearchVector, SearchQuery # ... vector = SearchVector(&quot;name&quot;, config=&quot;portuguese&quot;) query = SearchQuery(term, config=&quot;portuguese&quot;) # ...   O vector é feito assim pra utilizar a coluna &quot;name&quot; do model Singer. A query é feita para processar a variável term recebida no código da view acima.  O próximo ponto é criar annotations para fazer o select de campos como o to_tsvector e o ts_rank (o método .annotate do Django ORM faz o select de outros campos e agrega eles a entidade):  from django.contrib.postgres.search import SearchVector, SearchQuery, SearchRank # ... vector = SearchVector(&quot;name&quot;, config=&quot;portuguese&quot;) query = SearchQuery(term, config=&quot;portuguese&quot;) singers = Singer.objects.annotate( search=vector, rank=SearchRank(vector, query), ).filter( search=query ).order_by(&quot;-rank&quot;).all() # ...   Adicionando o código dentro da view, passamos a ter:  from django.shortcuts import render from django.contrib.postgres.search import SearchVector, SearchQuery, SearchRank from .models import Singer def search_singer(request): term = request.GET.get('q') if term: vector = SearchVector(&quot;name&quot;, config=&quot;portuguese&quot;) query = SearchQuery(term, config=&quot;portuguese&quot;) singers = Singer.objects.annotate( search=vector, rank=SearchRank(vector, query), ).filter( search=query ).order_by(&quot;-rank&quot;).all() else: singers = Singer.objects.order_by(&quot;-id&quot;).all() context = { 'singers': singers, 'term': term, } return render(request, &quot;cantor.html&quot;, context)   Utilizando um pequeno grupo de dados para teste:    Podeos testar e verificar que passamos a ter uma busca funcional:    Porém, ainda temos alguns problemas, pois, por exemplo, na busca por palavras incompletas, perdemos o ranqueamento:    Nesse ponto, entra a busca por similaridade que, combinada com o Full-Text Search nos permitirá fazer uma busca mais funcional.  ","version":null,"tagName":"h2"},{"title":"Busca por Similaridade​","type":1,"pageTitle":"Full-Text Search: Implementando com Postgres e Django","url":"/blog/full-text-search-postgres-django#busca-por-similaridade","content":" Precisamos, primeiro, adicionar a extensão pg_trgm no banco de dados. Podemos fazer isso manualmente ou podemos criar uma migration vazia e adicionar essa extensão na migration. Vou seguir pela segunda opção. Para a primeira, basta executar o comando no banco de dados:  CREATE EXTENSION pg_trgm   Para a segunda abordagem, podemos executar o comando python manage.py makemigrations nome_do_app --empty e ele criará uma -migration vazia. A partir da migration vazia, podemos adicionar o import ao CreateExtension e adicionar dentro de operations:  from django.db import migrations from django.contrib.postgres.operations import CreateExtension class Migration(migrations.Migration): dependencies = [ ('texto', '0003_alter_feat_music'), ] operations = [ CreateExtension(&quot;pg_trgm&quot;) ]   Basta agora executar python manage.py migrate e teremos a extensão criada no banco de dados.  Agora, dentro da nossa busca, podemos fazer o uso do TrigramSimilarity para melhorar nossos resultados. Primeiro, vamos adicionar dentro do .annotate:  from django.contrib.postgres.search import SearchVector, SearchQuery, SearchRank, TrigramSimilarity # ... singers = Singer.objects.annotate( search=vector, rank=SearchRank(vector, query), similarity=TrigramSimilarity(&quot;name&quot;, term), ) # ...   Precisamos, também, alterar o .filter para utilizar de um operador lógico OU. Para isso, precisamos fazer uso do Q(condição 1) | Q(condição 2) do django:  from django.contrib.postgres.search import SearchVector, SearchQuery, SearchRank, TrigramSimilarity from django.db.models import Q # ... singers = Singer.objects.annotate( search=vector, rank=SearchRank(vector, query), similarity=TrigramSimilarity(&quot;name&quot;, term), ).filter( Q(search=query) | Q(similarity__gt=0) ).order_by(&quot;-rank&quot;, &quot;-similarity&quot;).all() # ...   Aqui, o que fazemos é adicionar o campo de similarity na nossa query e filtrar pra &quot;o full-text search encontrou&quot; ou &quot;a similaridade é maior que zero&quot;. A partir desse momento, fazendo a mesma busca de um dos prints acima:    Por fim, nossa view passa a ter o código:  from django.shortcuts import render from django.db.models import Q from django.contrib.postgres.search import ( SearchQuery, SearchRank, SearchVector, TrigramSimilarity, ) from .models import Singer def search_singer(request): term = request.GET.get('q') if term: vector = SearchVector(&quot;name&quot;, config=&quot;portuguese&quot;) query = SearchQuery(term, config=&quot;portuguese&quot;) singers = Singer.objects.annotate( search=vector, rank=SearchRank(vector, query), similarity=TrigramSimilarity(&quot;name&quot;, term), ).filter( Q(search=query) | Q(similarity__gt=0) ).order_by(&quot;-rank&quot;, &quot;-similarity&quot;).all() else: singers = Singer.objects.order_by(&quot;-id&quot;).all() context = { 'singers': singers, 'term': term, } return render(request, &quot;cantor.html&quot;, context)   É possível utilizar tanto o rank ou o similarity para cortar valores, conforme exemplos da documentação.  Por último, podemos adicionar um índice dentro do nosso model para lidar com performance das queries:  from django.db import models from django.contrib.postgres.indexes import GinIndex from django.contrib.postgres.search import SearchVector class Singer(models.Model): name = models.CharField(&quot;Cantor&quot;, max_length=150) def __str__(self): return self.name class Meta: verbose_name = &quot;Cantor&quot; verbose_name_plural = &quot;Cantores&quot; indexes = [ GinIndex( SearchVector(&quot;name&quot;, config=&quot;portuguese&quot;), name=&quot;singer_search_vector_idx&quot;, ) ]     Todo o código-fonte do projeto está disponível no GitHub, nesse repositório.  Disclaimer: O código da versão desse texto está disponível na branch texto-1.  ","version":null,"tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Full-Text Search: Implementando com Postgres e Django","url":"/blog/full-text-search-postgres-django#referências","content":" 1 - A powerful full-text search in PostgreSQL in less than 20 lines  2 - Full text search - Django Documentation    Foto de capa por Mick Haupt no Unsplash. ","version":null,"tagName":"h2"},{"title":"Domain Driven Design","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/arquitetura/ddd","content":"","keywords":"","version":"Next"},{"title":"Camadas​","type":1,"pageTitle":"Domain Driven Design","url":"/docs/desenvolvimento/arquitetura/ddd#camadas","content":" ","version":"Next","tagName":"h2"},{"title":"Camada de aplicação​","type":1,"pageTitle":"Domain Driven Design","url":"/docs/desenvolvimento/arquitetura/ddd#camada-de-aplicação","content":" Responsável pelo projeto principal. Aqui serão implementados os controladores e a exposição de APIs. Tem a função de receber todas as requisições e direcioná-las a algum Service para executar uma determinada ação.  ","version":"Next","tagName":"h3"},{"title":"Camada de Serviço​","type":1,"pageTitle":"Domain Driven Design","url":"/docs/desenvolvimento/arquitetura/ddd#camada-de-serviço","content":" Nela são implementados fluxos de trabalho e regras globais ao sistema. Essa camada também usa o domínio para persistir informações contra o banco de dados.  ","version":"Next","tagName":"h3"},{"title":"Camada de Infraestrutura​","type":1,"pageTitle":"Domain Driven Design","url":"/docs/desenvolvimento/arquitetura/ddd#camada-de-infraestrutura","content":" É dividida em duas subcamadas:  Data: realiza a persistência com o banco de dados, utilizando, ou não, algum ORM.Cross-Cutting: uma camada 'separada' que não obedece a hierarquia de camada. Como o próprio nome diz, essa camada cruza toda a a hierarquia. Contém as funcionalidades que pode ser utilizadas em qualquer parte do código, como, por exemplo, validação de CPF/CNPJ, consumo de API externa e utilização de alguma biblioteca de segurança. POssui referências da camada Domain.  ","version":"Next","tagName":"h3"},{"title":"Camada de domínio​","type":1,"pageTitle":"Domain Driven Design","url":"/docs/desenvolvimento/arquitetura/ddd#camada-de-domínio","content":" Ele é responsável por representar conceitos, informações e situações referentes ao negócios.O estado que reflete a situação de negócios é controlado e usado aqui, embora os detalhes técnicos sobre como armazená-lo sejam delegados à infraestrutura. Essa camada é a essência de negócio do software sendo construído.A camada de modelo de domínio é a implementação do negócio. Quando você implementa uma camada de modelo de domínio de microsserviço em alguma linguagem, essa camada é codificada como uma biblioteca de classes reusável (DLL ou JAR), com as entidades de domínio que modelam os dados e realizam operações sobre ele.Seguindo os princípios de Ignorância de Persistência e a Ignorância da Infraestutura, essa camada deve ignorar totalmente os detalhes tecnológicos. Essas tarefas de persistência devem ser executadas pela camada de infraestrutura.Entidades de domínio não devem ter nenhuma dependência direta (como derivar de uma classe base) da infraestrutura ou acesso a dados, como Entity Framework, Hibrnate ou JPA.Idealmente, suas entidades de domínio não devem derivar nem implementar nenhum tipo definido na infraestrutura.  ","version":"Next","tagName":"h3"},{"title":"Padrões essenciais do DDD​","type":1,"pageTitle":"Domain Driven Design","url":"/docs/desenvolvimento/arquitetura/ddd#padrões-essenciais-do-ddd","content":" Objeto de ValorEntidadeRaiz agregadaRepositórioCaso de UsoContexto LimitadoFábrica de EntidadesServiço de Domínio ","version":"Next","tagName":"h2"},{"title":"Estilo Arquitetural","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/arquitetura/estilo-arquitetural","content":"Estilo Arquitetural Estilo Arquitetural descreve uma relação, nomeada, de componentes cobrindo uma variedade de características da arquitetura. O nome de um estilo arquitetural, cria um nome único que funciona como uma abreviatura entre arquitetos experientes. Cada nome captura os detalhes daquela arquitetura. Um estilo arquitetural descreve a topologia, as características padrão da arquitetura (benéficas ou prejudiciais). Referência Fundamentas of Software Architecture - Capítulo 9 - Mark Richards e Neal Ford.","keywords":"","version":"Next"},{"title":"Acessibilidade e font-size","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/front-end/acessibilidade-e-font-size","content":"","keywords":"","version":"Next"},{"title":"Referências​","type":1,"pageTitle":"Acessibilidade e font-size","url":"/docs/desenvolvimento/front-end/acessibilidade-e-font-size#referências","content":" Don’t use rem/em for paddings, margins and more ","version":"Next","tagName":"h2"},{"title":"Django-Rest-Framework e a API de models do Django","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/django/rest-framework-e-api-models-django","content":"Django-Rest-Framework e a API de models do Django O django-rest-framework possui serializers que se integram muito bem com os models do django, mas é importante ressaltar que o objetivo do rest-framework não é funcionar (e suportar) do mesmo modo a api de models do django e, portanto, algumas funcionalidades &quot;padrão&quot; podem se perder. Um exemplo disso, relatado em Issue #7159 no GitHub é o método clean() dentro do model. from django.core.exceptions import ValidationError from django.db import models from rest_framework import serializers from django import forms from django.test import TestCase class Sample(models.Model): title = models.CharField(max_length=50) def clean(self): raise ValidationError('') class SampleSerializer(serializers.ModelSerializer): class Meta: model = Sample fields = '__all__' class SampleForm(forms.ModelForm): class Meta: model = Sample fields = &quot;__all__&quot; class SampleTests(TestCase): def test_form(self): form = SampleForm({&quot;title&quot;: &quot;test&quot;}) self.assertFalse(form.is_valid()) def test_serializer(self): serializer = SampleSerializer(data={&quot;title&quot;: &quot;test&quot;}) self.assertFalse(serializer.is_valid()) ","keywords":"","version":"Next"},{"title":"QuerySet","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/django/queryset","content":"QuerySet Um QuerySet representa uma coleção de objetos do banco de dados. Em comparação com SQL, um QuerySet equivale a um SELECT. Quando utilizamos o método filter() de um queryset, adicionamos cláusulas limitantes como WHERE ou LIMIT. Ao usar o QuerySet, fazer diversas operações tipo filter() não irá acessar o banco de dados. Por exemplo: users = User.objects.filter(email__icontains='...').filter(is_active=True).filter(...) Mesmo adicionando vários filtros, o QuerySet não será computado e, portanto, não irá consultar o banco de dados. Para computar um QuerySet, é necessário utilizar algum dos métodos: .get(), .first(), etc. conforme QuerySet API reference ou usando algum dos métodos para forçar que o QuerySet seja computado: QuerySet API reference. Conhecer esses aspectos do QuerySet é importante para evitar escrever códigos problemáticos como, por exemplo: ids = [...] queryset = User.objects.filter(is_active=True) for id in ids: user = queryset.get(id=id) O uso do QuerySet como no exemplo acima irá executar uma query no banco de dados para cada ID, enquanto que alterando a lógica para que o método .get() não seja chamado, apenas uma consulta ao banco de dados será realizada: ids = [...] queryset = User.objects.filter(is_active=True, id__in=ids) for user in queryset: print(user) ","keywords":"","version":"Next"},{"title":"Introdução aos Micro Front-End's","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/front-end/micro-front-end/introduction-to-micro-front-end","content":"","keywords":"","version":"Next"},{"title":"Características​","type":1,"pageTitle":"Introdução aos Micro Front-End's","url":"/docs/desenvolvimento/front-end/micro-front-end/introduction-to-micro-front-end#características","content":" A arquitetura de micro front-ends traz uma ideia parecida com microserviços para o front-end, com algumas características:  Maior independência entre os módulos;Arquitetura mais agnóstica a frameworks;Lógica pulverizada em vários projetos;Pipeline de build, test e deploys mais rápida;Assim como a arquitetura de micro serviços, adiciona uma complexidade a mais no projeto.  Os micro front-ends podem ser definidos, em [1], como:  &quot;An architectural style where independently deliverable frontend applications are composed into a greater whole&quot;    ","version":"Next","tagName":"h2"},{"title":"Exemplo Ilustrado​","type":1,"pageTitle":"Introdução aos Micro Front-End's","url":"/docs/desenvolvimento/front-end/micro-front-end/introduction-to-micro-front-end#exemplo-ilustrado","content":" Wireframe\tMicro front-end\t    ","version":"Next","tagName":"h2"},{"title":"Micro front-end's devem ter:​","type":1,"pageTitle":"Introdução aos Micro Front-End's","url":"/docs/desenvolvimento/front-end/micro-front-end/introduction-to-micro-front-end#micro-front-ends-devem-ter","content":" Baixo ou nenhum acoplamento entre os micro front-ends;Alta coesão;Não deve assumir responsabilidades de outro micro front-end;Não deve interferir ou ser interferido por outro micro front-end;Base de código independente;Pipeline de build, test e deploy separados e independentes.Times autônomos.    Pipeline de build, test e deploy separados e independentes    Times autônomos  ","version":"Next","tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Introdução aos Micro Front-End's","url":"/docs/desenvolvimento/front-end/micro-front-end/introduction-to-micro-front-end#referências","content":" Micro Frontends ","version":"Next","tagName":"h2"},{"title":"Classe","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/fundamentos/classe","content":"","keywords":"","version":"Next"},{"title":"Referência​","type":1,"pageTitle":"Classe","url":"/docs/desenvolvimento/fundamentos/classe#referência","content":" Cherry Ramatis - Ending the war or continuing it? Let's bring functional programming to OOP codebases ","version":"Next","tagName":"h2"},{"title":"Testando formulários com acessibilidade","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/front-end/react/testando-formularios-com-acessibilidade","content":"","keywords":"","version":"Next"},{"title":"Input's​","type":1,"pageTitle":"Testando formulários com acessibilidade","url":"/docs/desenvolvimento/front-end/react/testando-formularios-com-acessibilidade#inputs","content":" ","version":"Next","tagName":"h2"},{"title":"Componente​","type":1,"pageTitle":"Testando formulários com acessibilidade","url":"/docs/desenvolvimento/front-end/react/testando-formularios-com-acessibilidade#componente","content":" &lt;label htmlFor=&quot;name&quot;&gt;Name&lt;/label&gt; &lt;input id=&quot;name&quot; onChange={onFieldChange} placeholder=&quot;Enter your name&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"Procurando pelos elementos​","type":1,"pageTitle":"Testando formulários com acessibilidade","url":"/docs/desenvolvimento/front-end/react/testando-formularios-com-acessibilidade#procurando-pelos-elementos","content":" user.type(screen.getByRole('textbox', { name: 'Name' }), 'Test');   Nome acessível O { name: &quot;Name&quot; } procura pelo nome acessível (label, por exemplo) e não pelo atributo name do input.  ","version":"Next","tagName":"h3"},{"title":"Submit Buttons​","type":1,"pageTitle":"Testando formulários com acessibilidade","url":"/docs/desenvolvimento/front-end/react/testando-formularios-com-acessibilidade#submit-buttons","content":" Use os métodos do tipo *ByRole:  ","version":"Next","tagName":"h2"},{"title":"Componente​","type":1,"pageTitle":"Testando formulários com acessibilidade","url":"/docs/desenvolvimento/front-end/react/testando-formularios-com-acessibilidade#componente-1","content":" &lt;button type='submit'&gt;Sign up&lt;/button&gt;   ","version":"Next","tagName":"h3"},{"title":"Procurando pelos elementos​","type":1,"pageTitle":"Testando formulários com acessibilidade","url":"/docs/desenvolvimento/front-end/react/testando-formularios-com-acessibilidade#procurando-pelos-elementos-1","content":" screen.getByRole('button', { name: 'Sign up' });   Nome acessível O nome acessível dessa vez é o texto atual do botão. Perceba que se adicionarmos um atributo aria-label no botão, o nome acessível passa a ser o conteúdo do atributo aria-label.  ","version":"Next","tagName":"h3"},{"title":"Referências​","type":1,"pageTitle":"Testando formulários com acessibilidade","url":"/docs/desenvolvimento/front-end/react/testando-formularios-com-acessibilidade#referências","content":" Best Practices for Writing Tests with React Testing Library ","version":"Next","tagName":"h2"},{"title":"Funções Puras","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/fundamentos/funcoes-puras","content":"","keywords":"","version":"Next"},{"title":"Referência​","type":1,"pageTitle":"Funções Puras","url":"/docs/desenvolvimento/fundamentos/funcoes-puras#referência","content":" Cherry Ramatis - Ending the war or continuing it? Let's bring functional programming to OOP codebases ","version":"Next","tagName":"h2"},{"title":"Formas de Implementação de Micro Front-End's","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/front-end/micro-front-end/implementations-of-micro-front-end","content":"","keywords":"","version":"Next"},{"title":"Implementação em tempo de build​","type":1,"pageTitle":"Formas de Implementação de Micro Front-End's","url":"/docs/desenvolvimento/front-end/micro-front-end/implementations-of-micro-front-end#implementação-em-tempo-de-build","content":" Usar diversos projetos, por exemplo no npm, integrados por um projeto maior. Por exemplo, no package.json:  { &quot;name&quot;: &quot;@my-project/main&quot;, // ... &quot;dependencies&quot;: { &quot;@my-project/frontend-1&quot;: &quot;1.0.0&quot;, &quot;@my-project/frontend-2&quot;: &quot;1.0.0&quot;, &quot;@my-project/frontend-3&quot;: &quot;1.0.0&quot; } }   Um problema disso é que as pipelines de build, test e deploy não são separados e independentes.  ","version":"Next","tagName":"h2"},{"title":"Integração por meio de funções javascript​","type":1,"pageTitle":"Formas de Implementação de Micro Front-End's","url":"/docs/desenvolvimento/front-end/micro-front-end/implementations-of-micro-front-end#integração-por-meio-de-funções-javascript","content":" A ideia, dentro dessa forma de trabalho, é ter vários scripts (bundles) que disponibilizam funções para renderizar aquele micro front-end e, ter um script principal que gerencia chamada para essas funções. Um exemplo disso é:  &lt;script src=&quot;https://browse.example.com/bundle.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://order.example.com/bundle.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://profile.example.com/bundle.js&quot;&gt;&lt;/script&gt; &lt;div id=&quot;micro-frontend-root&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; const microFrontEndsByRoute = { '/': window.renderBrowseRestaurants, '/order-food': window.renderOrderFood, '/user-profile': window.renderUserProfile, }; const renderFunction = microFrontendsByRoute[window.location.pathname]; renderFunction('micro-frontend-root'); &lt;/script&gt;   ","version":"Next","tagName":"h2"},{"title":"Integração através de web components​","type":1,"pageTitle":"Formas de Implementação de Micro Front-End's","url":"/docs/desenvolvimento/front-end/micro-front-end/implementations-of-micro-front-end#integração-através-de-web-components","content":" A estratégia para essa abordagem é definir web components nativos do browser para os micro front-ends:  &lt;!-- /about --&gt; &lt;div id=&quot;container&quot;&gt; &lt;about-micro-frontend&gt;&lt;/about-micro-frontend&gt; &lt;/div&gt;   &lt;!-- /products --&gt; &lt;div id=&quot;container&quot;&gt; &lt;products-micro-frontend&gt;&lt;/products-micro-frontend&gt; &lt;/div&gt;   Ao utilizar web components para criar micro front-ends, é possível utilizar qualquer uma das duas abordagens anteriores para executar os componentes.  ","version":"Next","tagName":"h2"},{"title":"Integração via iframes​","type":1,"pageTitle":"Formas de Implementação de Micro Front-End's","url":"/docs/desenvolvimento/front-end/micro-front-end/implementations-of-micro-front-end#integração-via-iframes","content":" &lt;!-- /about --&gt; &lt;div id=&quot;container&quot;&gt; &lt;iframe src=&quot;https://about.example.com&quot;&gt;&lt;/iframe&gt; &lt;/div&gt;   &lt;!-- /products --&gt; &lt;div id=&quot;container&quot;&gt; &lt;iframe src=&quot;https://products.example.com&quot;&gt;&lt;/iframe&gt; &lt;/div&gt;   ","version":"Next","tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Formas de Implementação de Micro Front-End's","url":"/docs/desenvolvimento/front-end/micro-front-end/implementations-of-micro-front-end#referências","content":" Micro Frontends ","version":"Next","tagName":"h2"},{"title":"Usar findBy ao invés de waitFor","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/front-end/react/findby-ao-inves-de-waitfor","content":"","keywords":"","version":"Next"},{"title":"Componente​","type":1,"pageTitle":"Usar findBy ao invés de waitFor","url":"/docs/desenvolvimento/front-end/react/findby-ao-inves-de-waitfor#componente","content":" Suponha o seguinte componente que executa uma ação assíncrona que altera o componente renderizado.  export const ListPage = () =&gt; { const [items, setItems] = useState([]); useEffect(() =&gt; { const loadItems = async () =&gt; { setTimeout(() =&gt; setItems(['Item 1', 'Item 2']), 100); }; loadItems(); }, []); if (!items.length) { return &lt;div&gt;Loading...&lt;/div&gt;; } return ( &lt;div className='text-list__container'&gt; &lt;h1&gt;List of items&lt;/h1&gt; &lt;ItemList items={items} /&gt; &lt;/div&gt; ); };   ","version":"Next","tagName":"h2"},{"title":"Com waitFor​","type":1,"pageTitle":"Usar findBy ao invés de waitFor","url":"/docs/desenvolvimento/front-end/react/findby-ao-inves-de-waitfor#com-waitfor","content":" import { waitFor } from '@testing-library/react'; //... describe('ListPage', () =&gt; { it('renders without breaking', async () =&gt; { render(&lt;ListPage /&gt;); await waitFor(() =&gt; { expect( screen.getByRole('heading', { name: 'List of items' }), ).toBeInTheDocument(); }); }); });   ","version":"Next","tagName":"h2"},{"title":"Com findBy​","type":1,"pageTitle":"Usar findBy ao invés de waitFor","url":"/docs/desenvolvimento/front-end/react/findby-ao-inves-de-waitfor#com-findby","content":" describe('ListPage', () =&gt; { it('renders without breaking', async () =&gt; { render(&lt;ListPage /&gt;); expect( await screen.findByRole('heading', { name: 'List of items' }), ).toBeInTheDocument(); }); });   ","version":"Next","tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Usar findBy ao invés de waitFor","url":"/docs/desenvolvimento/front-end/react/findby-ao-inves-de-waitfor#referências","content":" Best Practices for Writing Tests with React Testing Library ","version":"Next","tagName":"h2"},{"title":"Single Responsibility Principle","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/padroes/solid/srp","content":"","keywords":"","version":"Next"},{"title":"Classes Coesas​","type":1,"pageTitle":"Single Responsibility Principle","url":"/docs/desenvolvimento/padroes/solid/srp#classes-coesas","content":" Classes coesas têm uma característica semelhante: os conceitos que essas classes representam estariam relacionados e separá-los seria pouco natural. O SRP é uma outra maneira de falar sobre a necessidade de código coeso.  ","version":"Next","tagName":"h2"},{"title":"Encontrando classes pouco coesas​","type":1,"pageTitle":"Single Responsibility Principle","url":"/docs/desenvolvimento/padroes/solid/srp#encontrando-classes-pouco-coesas","content":" Para encontrar classes pouco coesas, devemos procurar por classes que:  possuem muitos métodos diferentes;são modificadas com frequência;não param nunca de crescer.    Um dos problemas de coesão mais comuns são Controllers que fazem coisas demais:  buscam dados no BD;implementam regras de negócio;enviam emails;chamam Web Services;enviam resultados para a View (o que realmente deveriam fazer).  ","version":"Next","tagName":"h3"},{"title":"Referência​","type":1,"pageTitle":"Single Responsibility Principle","url":"/docs/desenvolvimento/padroes/solid/srp#referência","content":" Desbravando SOLID: Práticas avançadas para códigos de qualidade em Java moderno. Alexandre Aquiles. Casa do Código. Alura. ","version":"Next","tagName":"h2"},{"title":"Don't Repeat Yourself","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/padroes/dry","content":"","keywords":"","version":"Next"},{"title":"Acrônimo​","type":1,"pageTitle":"Don't Repeat Yourself","url":"/docs/desenvolvimento/padroes/dry#acrônimo","content":" No Pragmatic Programmer, é criado o acrônimo D.R.Y: Don't Repeat Yourself, que é:  Todo bloco de conhecimento deve ter uma representação única, sem ambiguidades e dominante num sistema.  ","version":"Next","tagName":"h2"},{"title":"Front-End e Componentização​","type":1,"pageTitle":"Don't Repeat Yourself","url":"/docs/desenvolvimento/padroes/dry#front-end-e-componentização","content":" A prática de componentização e uso de tokens no front-end é uma ótima maneira de evitar repetição de código.  ","version":"Next","tagName":"h2"},{"title":"É uma repetição?​","type":1,"pageTitle":"Don't Repeat Yourself","url":"/docs/desenvolvimento/padroes/dry#é-uma-repetição","content":" Repetir código é ruim, mas uma das formas de entender se um trecho de código é realmente uma duplicação é, de fato, pensar nos motivos para alterar esse trecho de código. Por exemplo: toda vez que um desses trechos for alterado, todos os outros deverão ser alterados também ou existe um mótivo pra alterar apenas um deles? Relacionado com SRP.  ","version":"Next","tagName":"h2"},{"title":"Referência​","type":1,"pageTitle":"Don't Repeat Yourself","url":"/docs/desenvolvimento/padroes/dry#referência","content":" Desbravando SOLID: Práticas avançadas para códigos de qualidade em Java moderno. Alexandre Aquiles. Casa do Código. Alura. ","version":"Next","tagName":"h2"},{"title":"Dependency Inversion Principle","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/padroes/solid/dip","content":"","keywords":"","version":"Next"},{"title":"Acoplamento​","type":1,"pageTitle":"Dependency Inversion Principle","url":"/docs/desenvolvimento/padroes/solid/dip#acoplamento","content":" Uma classe com muitas dependências tem acoplamento com muitas outras classes. Além disso, o código acaba acoplado também às dependências das dependências e assim por diante.  Mudanças nas dependências, ou nas dependências das dependências, podem acabar se propagando para a classe que as utiliza. Precisamos ter atenção para evitar que dependências indesejadas se espalhem indevidamente pelo nosso código.  ","version":"Next","tagName":"h2"},{"title":"Acoplamento bom x Acoplamento ruim​","type":1,"pageTitle":"Dependency Inversion Principle","url":"/docs/desenvolvimento/padroes/solid/dip#acoplamento-bom-x-acoplamento-ruim","content":" Acoplamento precisa existir. Uma classe totalmente desacoplada é uma classe inútil.  Exemplo Num código Java desde o primeiro OlaMundo dependemos de String e System. Essas classes do pacote java.lang são estáveis: mudam muito pouco.  Classes estáveis têm essa característica porque milhões de projetos as usam e mudá-las teria um impacto gigantesco. Por isso, podemos depender delas tranquilamente. Esse é um acoplamento bom.  Depender de classes voláteis, por sua vez, é o acoplamento ruim.  ","version":"Next","tagName":"h3"},{"title":"Abstrações e Inversão das Dependências​","type":1,"pageTitle":"Dependency Inversion Principle","url":"/docs/desenvolvimento/padroes/solid/dip#abstrações-e-inversão-das-dependências","content":" Podemos usar classes abstratas e, preferencialmente, interfaces. Abstrações são estáveis: mudam muito menos que implementações.  Podemos também usar classes concretas como abstrações, desde que não deixemos detalhes de outras dependências vazarem.  Ao usarmos classes abstratas ou interfaces, o código não depende mais diretamente da dependência volátil e sim da abstração. E a dependência volátil, por sua vez, também depende da abstração, implementando-a. Por isso, podemos dizer que a dependência é invertida.  Devemos evitar que detalhes das dependências vazem nas nossas abstrações.  ","version":"Next","tagName":"h2"},{"title":"Abstrações conceitualmente abstratas​","type":1,"pageTitle":"Dependency Inversion Principle","url":"/docs/desenvolvimento/padroes/solid/dip#abstrações-conceitualmente-abstratas","content":" Devemos evitar criar abstrações vinculadas a tarefas muito particulares. Por exemplo:  public interface EnviadorSMS { void enviaNota(String mensagemNota, String telefoneClienteNota); }   Boas abstrações devem fornecer capacidades mais amplas, sem estarem atreladas a um uso muito específico.  ","version":"Next","tagName":"h2"},{"title":"Regras de Negócio x Detalhes​","type":1,"pageTitle":"Dependency Inversion Principle","url":"/docs/desenvolvimento/padroes/solid/dip#regras-de-negócio-x-detalhes","content":" ","version":"Next","tagName":"h2"},{"title":"Código de Alto Nível e Baixo Nível​","type":1,"pageTitle":"Dependency Inversion Principle","url":"/docs/desenvolvimento/padroes/solid/dip#código-de-alto-nível-e-baixo-nível","content":" Código de alto nível seriam os códigos que implementam regras de negócio.Código de baixo nível seriam os mecanismos de entrega, os detalhes de implementação mais técnicos.  Código de alto nível é aquele mais distante das entradas ou saídas do sistema e, por isso, muda menos frequentemente e por razões mais importantes, relacionadas ao negócio.  Já o código de baixo nível, mais próximo das entradas ou saídas, muda mais frequentemente e com mais urgência.  Alto ou baixo nível depende do contexto Para uma aplicação Web, o código SQL pode ser considerado um código de baixo nível, um detalhe de implementação, já que não está diretamente ligado às regras de negócio, mas à representação das entidades em um banco de dados relacional. Porém, para quem desenvolve um ORM, gerar código SQL comum entre os bancos de dados pode ser considerado alto nível, já que está relacionado ao problema que uma biblioteca de ORM resolve. Variações entre os bancos de dados, como AUTO_INCREMENT, SEQUENCE ou IDENTITY na geração de PK's, seriam detalhes de implementação de baixo nível.  ","version":"Next","tagName":"h3"},{"title":"O princípio da inversão de dependências​","type":1,"pageTitle":"Dependency Inversion Principle","url":"/docs/desenvolvimento/padroes/solid/dip#o-princípio-da-inversão-de-dependências","content":" Módulos de alto nível não devem depender de módulos de baixo nível. Ambos devem depender de abstrações. Abstrações não devem depender de detalhes. Detalhes devem depender de abstrações.  Exemplo Pense em uma arquitetura em três camadas: o código da camada de Apresentação depende do código da camada de Negócio que, por sua vez, depende do código da camada de Persistência. Essa arquitetura não atende ao DIP: código de alto nível (Negócio) depende de código de baixo nível (Persistência). Para atender ao DIP, teríamos que inserir abstrações na camada de Negócio para inverter as dependências, fazendo com que Persistência dependa de Negócio e não o contrário.  TODO: continuar aqui ","version":"Next","tagName":"h2"},{"title":"Percentis (p90, p95)","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/testes-carga/percentis","content":"Percentis (p90, p95) Quando temos um número de percentil p90, queremos dizer que 90% das requisições levaram p90 ou menos tempo. O mesmo vale para p95 com 95% das requisições levando p95 ou menos tempo. Por exemplo, com os resultados de testes com k6: http_req_duration..............: avg=7.63s min=191.2ms med=579.61ms max=41.24s p(90)=37.23s p(95)=39.31s Temos que a média de duração das requisições foi de 7.63s, a menor duração foi de 191.2ms, a mediana 579.61ms, a máxima 41.24s. 90% das requisições levaram até 37.23s. 95% das requisições levaram até 39.31s. Observação No caso, considerando um cálculo manual, ordenar as requisições por tempo (do menor para o maior) e pegar o número de requisições que corresponde a 90% e, posteriormente, pegar o maior tempo, obtemos o p90.","keywords":"","version":"Next"},{"title":"Insecure Direct Object Reference","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/seguranca/idor","content":"","keywords":"","version":"Next"},{"title":"Apenas URL's?​","type":1,"pageTitle":"Insecure Direct Object Reference","url":"/docs/desenvolvimento/seguranca/idor#apenas-urls","content":" Não necessariamente precisa acontecer via URL, pode-se configurar, também, por meio de parâmetros no corpo da requisição:  &lt;form action=&quot;/update_profile&quot; method=&quot;post&quot;&gt; &lt;!-- Other fields for updating name, email, etc. --&gt; &lt;input type=&quot;hidden&quot; name=&quot;user_id&quot; value=&quot;12345&quot; /&gt; &lt;button type=&quot;submit&quot;&gt;Update Profile&lt;/button&gt; &lt;/form&gt;  ","version":"Next","tagName":"h2"},{"title":"Teste de Carga","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/testes-carga/teste-de-carga","content":"","keywords":"","version":"Next"},{"title":"Objetivos​","type":1,"pageTitle":"Teste de Carga","url":"/docs/desenvolvimento/testes-carga/teste-de-carga#objetivos","content":" Testar a carga esperada do sistema.Garantir que a performance mínima é sempre a esperada.  Exemplo Se é esperado que a API seja acessada por 1000 usuários esse é o valor que vamos usar nos testes.  ","version":"Next","tagName":"h2"},{"title":"Informações​","type":1,"pageTitle":"Teste de Carga","url":"/docs/desenvolvimento/testes-carga/teste-de-carga#informações","content":" Como estamos simulando o comportamento normal de um usuário, a carga deve aumentar gradualmente e não de uma vez só. Os testes devem ter uma fase de ramp-up, onde a carga aumenta gradualmente, e outra fase de ramp-down, onde a carga vai diminuindo gradualmente até acabar.  Observações Esse tipo de teste pode ser utilizado, também, para ver como o sistema se comporta com relação a elasticidade.    ","version":"Next","tagName":"h2"},{"title":"Testando com o k6​","type":1,"pageTitle":"Teste de Carga","url":"/docs/desenvolvimento/testes-carga/teste-de-carga#testando-com-o-k6","content":" Para realizar esse tipo de teste com o k6, utilizamos a funcionalidade stages dentro das options:  import http from 'k6/http'; import { sleep } from 'k6'; export const options = { stages: [ { duration: '10s', target: 100, }, { duration: '30s', target: 100, }, { duration: '10s', target: 0, }, ], }; export default function () { http.get('http://192.168.68.108:3000'); sleep(1); }   O período de ramp-up irá durar 10 segundos e irá de 0 até 100 usuários. O período estável do gráfico irá se manter em 100 usuários e depois, no ramp-down irá reduzir de 100 para 0 usuários simultâneos.  ","version":"Next","tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Teste de Carga","url":"/docs/desenvolvimento/testes-carga/teste-de-carga#referências","content":" Tipos de teste de cargaTeste de carga usando o k6 ","version":"Next","tagName":"h2"},{"title":"Teste de fumaça","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/testes-carga/teste-de-fumaca","content":"","keywords":"","version":"Next"},{"title":"Objetivos​","type":1,"pageTitle":"Teste de fumaça","url":"/docs/desenvolvimento/testes-carga/teste-de-fumaca#objetivos","content":" Testar a funcionalidade básica da aplicação e garantir que ela vai agir corretamente com um ou poucos usuários.Serve como baseline para os próximos testes.  Exemplo Se a aplicação executa em X milissegundos para 1 usuário podemos usar esse valor para comparar com 100 ou 1000 usuários simultâneos.  ","version":"Next","tagName":"h2"},{"title":"Testando com o k6​","type":1,"pageTitle":"Teste de fumaça","url":"/docs/desenvolvimento/testes-carga/teste-de-fumaca#testando-com-o-k6","content":" O teste é feito configurando poucos usuários (virtual user, vus, nas configurações do k6). A função exportada como default deve simular o comportamento do usuário, inclusive usando sleep() para que o comportamento esteja mais próximo possível do usuário final.  import http from 'k6/http'; import { sleep } from 'k6'; export const options = { vus: 1, duration: '5s', }; export default function () { http.get('http://192.168.68.108:3000'); sleep(1); }   ","version":"Next","tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Teste de fumaça","url":"/docs/desenvolvimento/testes-carga/teste-de-fumaca#referências","content":" Tipos de teste de cargaTeste de carga usando o k6 ","version":"Next","tagName":"h2"},{"title":"Teste de imersão","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/testes-carga/teste-de-imersao","content":"","keywords":"","version":"Next"},{"title":"Objetivos​","type":1,"pageTitle":"Teste de imersão","url":"/docs/desenvolvimento/testes-carga/teste-de-imersao#objetivos","content":" Testar como o sistema se comporta sob carga constante por um longo período de tempo.Ajudar a identificar memory leaks, ou como o sistema se comporta com a exaustão de alguns recursos como memória, disco e banco de dados.  ","version":"Next","tagName":"h2"},{"title":"Testando com o k6​","type":1,"pageTitle":"Teste de imersão","url":"/docs/desenvolvimento/testes-carga/teste-de-imersao#testando-com-o-k6","content":" O teste de imersão e o teste de carga, em termos de implementação para o k6 são iguais, o que diferencia eles é o tempo configurado para cada stage e a quantidade de usuários:  import http from 'k6/http'; import { sleep } from 'k6'; export const options = { stages: [ { duration: '5m', target: 1000, }, { duration: '24h', target: 1000, }, { duration: '5m', target: 0, }, ], }; export default function () { http.get('http://192.168.68.108:3000'); sleep(1); }   Assim como o teste de ponto de interrupção, é necessário observabilidade para conseguir identificar problemas que acontecem durante o teste.  ","version":"Next","tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Teste de imersão","url":"/docs/desenvolvimento/testes-carga/teste-de-imersao#referências","content":" Tipos de teste de cargaTeste de carga usando o k6 ","version":"Next","tagName":"h2"},{"title":"Teste de Estresse","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/testes-carga/teste-de-estresse","content":"","keywords":"","version":"Next"},{"title":"Objetivos​","type":1,"pageTitle":"Teste de Estresse","url":"/docs/desenvolvimento/testes-carga/teste-de-estresse#objetivos","content":" Adicionar mais carga do que o normal.Testa como o sistema se comporta sobre pressão.  ","version":"Next","tagName":"h2"},{"title":"Testando com o k6​","type":1,"pageTitle":"Teste de Estresse","url":"/docs/desenvolvimento/testes-carga/teste-de-estresse#testando-com-o-k6","content":" Fundamentalmente, o teste de estresse e o teste de carga, em termos de implementação para o k6 são iguais, o que diferencia eles é a determinação do que é considerado a carga esperada pelo seu sistema:  import http from 'k6/http'; import { sleep } from 'k6'; export const options = { stages: [ { duration: '10s', target: 200, }, { duration: '30s', target: 200, }, { duration: '10s', target: 0, }, ], }; export default function () { http.get('http://192.168.68.108:3000'); sleep(1); }   ","version":"Next","tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Teste de Estresse","url":"/docs/desenvolvimento/testes-carga/teste-de-estresse#referências","content":" Tipos de teste de cargaTeste de carga usando o k6 ","version":"Next","tagName":"h2"},{"title":"Teste de Pico","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/testes-carga/teste-de-pico","content":"","keywords":"","version":"Next"},{"title":"Objetivos​","type":1,"pageTitle":"Teste de Pico","url":"/docs/desenvolvimento/testes-carga/teste-de-pico#objetivos","content":" Adicionar um pico de carga para observar como o sistema se comporta nesses cenários.  ","version":"Next","tagName":"h2"},{"title":"Como testar​","type":1,"pageTitle":"Teste de Pico","url":"/docs/desenvolvimento/testes-carga/teste-de-pico#como-testar","content":" Para testar esse caso, aumentamos, de forma instantânea, o número de acessos. Esse número deve diminuir na mesma velocidade.  ","version":"Next","tagName":"h2"},{"title":"Testando com o k6​","type":1,"pageTitle":"Teste de Pico","url":"/docs/desenvolvimento/testes-carga/teste-de-pico#testando-com-o-k6","content":" import http from 'k6/http'; import { sleep } from 'k6'; export const options = { stages: [ { duration: '1m', target: 10000, }, { duration: '30s', target: 0, }, ], }; export default function () { http.get('http://192.168.68.108:3000'); sleep(1); }   Podem acontecer falhas e degradação do desempenho e, dessa forma, os resultados do teste do k6 podem fornecer insights se a porcentagem de falhas e a performance que caiu são aceitáveis para esse caso ou não.  ","version":"Next","tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Teste de Pico","url":"/docs/desenvolvimento/testes-carga/teste-de-pico#referências","content":" Tipos de teste de cargaTeste de carga usando o k6 ","version":"Next","tagName":"h2"},{"title":"UTM","type":0,"sectionRef":"#","url":"/docs/marketing/utm","content":"","keywords":"","version":"Next"},{"title":"Tipos de Tags UTM​","type":1,"pageTitle":"UTM","url":"/docs/marketing/utm#tipos-de-tags-utm","content":" utm_source: a origem do tráfego, ou seja, de qual site, anunciante ou publicação veio o usuário.utm_medium: a mídia de publicidade ou marketing usada para chegar ao seu site (exemplos: banner, cpc, newsletter).utm_campaign: o nome da campanha que define determinado contexto de marketing (exemplos: natal, lancamento, promo01). ","version":"Next","tagName":"h2"},{"title":"Estatística Descritiva vs Inferência Estatística","type":0,"sectionRef":"#","url":"/docs/matematica/estatistica/inferencia-vs-descritiva","content":"Estatística Descritiva vs Inferência Estatística Estatística Descritiva Trata da organização, resumo e análise dos dados. Estatística Inferencial Estatística Inferencial ou Inferência Estatística trabalha obtendo conclusões sobre a população a partir da amostra.","keywords":"","version":"Next"},{"title":"Teste de ponto de interrupção","type":0,"sectionRef":"#","url":"/docs/desenvolvimento/testes-carga/teste-de-ponto-de-interrupcao","content":"","keywords":"","version":"Next"},{"title":"Objetivos​","type":1,"pageTitle":"Teste de ponto de interrupção","url":"/docs/desenvolvimento/testes-carga/teste-de-ponto-de-interrupcao#objetivos","content":" Forçar uma carga no sistema até ele quebrar.Identificar qual é o ponto de ruptura do ambiente.  ","version":"Next","tagName":"h2"},{"title":"Testando com o k6​","type":1,"pageTitle":"Teste de ponto de interrupção","url":"/docs/desenvolvimento/testes-carga/teste-de-ponto-de-interrupcao#testando-com-o-k6","content":" import http from 'k6/http'; import { sleep } from 'k6'; export const options = { stages: [ { duration: '2h', target: 100000, }, ], }; export default function () { http.get('http://192.168.68.108:3000'); sleep(1); }   ","version":"Next","tagName":"h2"},{"title":"Analisando​","type":1,"pageTitle":"Teste de ponto de interrupção","url":"/docs/desenvolvimento/testes-carga/teste-de-ponto-de-interrupcao#analisando","content":" Para analisar, de melhor forma possível, é necessário fazer o uso de observabilidade. Somente com os dados dos testes do k6 ficará difícil encontrar os problemas.  É preciso analisar como o servidor e aplicação se comportam para entender quando ela para de responder. Isso permite identificar gargalos e pontos de ruptura do sistema.  ","version":"Next","tagName":"h2"},{"title":"Referências​","type":1,"pageTitle":"Teste de ponto de interrupção","url":"/docs/desenvolvimento/testes-carga/teste-de-ponto-de-interrupcao#referências","content":" Tipos de teste de cargaTeste de carga usando o k6 ","version":"Next","tagName":"h2"},{"title":"Sobre","type":0,"sectionRef":"#","url":"/docs/intro","content":"Sobre TODO: escrever aqui Introdução Esse é uma seção de anotações sobre diversos temas de estudo na área de tecnologia, ciências e matemática.","keywords":"","version":"Next"},{"title":"Correlação Linear","type":0,"sectionRef":"#","url":"/docs/matematica/estatistica/correlacao-linear","content":"","keywords":"","version":"Next"},{"title":"Coeficiente de Correlação​","type":1,"pageTitle":"Correlação Linear","url":"/docs/matematica/estatistica/correlacao-linear#coeficiente-de-correlação","content":" Corr(x,y)=∑xi⋅yi−nxˉyˉ[∑xi2−nxˉ2]⋅[∑yi2−nyˉ2]\\text{Corr}(x, y) = \\dfrac{ \\displaystyle\\sum x_i \\cdot y_i - n\\bar{x}\\bar{y} }{ \\sqrt{ \\bigg[ \\displaystyle\\sum x_i^2 - n\\bar{x}^2 \\bigg ] \\cdot \\bigg[ \\displaystyle\\sum y_i^2 - n\\bar{y}^2 \\bigg ] } }Corr(x,y)=[∑xi2​−nxˉ2]⋅[∑yi2​−nyˉ​2]​∑xi​⋅yi​−nxˉyˉ​​ ","version":"Next","tagName":"h2"},{"title":"Audio entre Dispositivos","type":0,"sectionRef":"#","url":"/docs/osx-kvm/audio","content":"Audio entre Dispositivos O áudio não é passado, diretamente, pelo OSX-KVM para a máquina host. A solução mais simples encontrada para executar os sons do MacOS, ao invés de configurar um passthrough foi utilizar um combo do BlackHole instalado no MacOS e configurado como driver além do SonoBus para fazer streaming do som obtido pelo BlackHole para outros dispositivos (como, por exemplo, uma instalação mobile do SonoBus em algum celular.)","keywords":"","version":"Next"},{"title":"Regressão Linear Simples","type":0,"sectionRef":"#","url":"/docs/matematica/estatistica/regressao-linear-simples","content":"","keywords":"","version":"Next"},{"title":"Visual​","type":1,"pageTitle":"Regressão Linear Simples","url":"/docs/matematica/estatistica/regressao-linear-simples#visual","content":"   ","version":"Next","tagName":"h2"},{"title":"Fórmula​","type":1,"pageTitle":"Regressão Linear Simples","url":"/docs/matematica/estatistica/regressao-linear-simples#fórmula","content":" y=β0+β1xy = \\beta_0 + \\beta_1 xy=β0​+β1​x  O objetivo é calcular β0\\beta_0β0​ e β1\\beta_1β1​.  Coeficientes β0\\beta_0β0​ é chamado de intercepto (coeficiente linear da reta). β1\\beta_1β1​ é chamado de inclinação (coeficiente angular da reta).reta.  Variáveis A variável yyy é chamada de variável dependente, ou resposta.A variável xxx é chamda de variável independente ou explicativa.  ","version":"Next","tagName":"h2"},{"title":"Determinação dos Parâmetros​","type":1,"pageTitle":"Regressão Linear Simples","url":"/docs/matematica/estatistica/regressao-linear-simples#determinação-dos-parâmetros","content":" ","version":"Next","tagName":"h2"},{"title":"Inclinação​","type":1,"pageTitle":"Regressão Linear Simples","url":"/docs/matematica/estatistica/regressao-linear-simples#inclinação","content":" β1=∑xiyi−(∑xi)⋅(∑yi)n∑xi2−(∑xi)2n\\beta_1 = \\dfrac{ \\displaystyle\\sum x_i y_i - \\dfrac{ \\big( \\displaystyle\\sum x_i \\big) \\cdot \\big( \\displaystyle\\sum y_i \\big) }{n} }{ \\displaystyle\\sum x_i^2 - \\dfrac{ \\big( \\sum x_i \\big)^2 }{n} }β1​=∑xi2​−n(∑xi​)2​∑xi​yi​−n(∑xi​)⋅(∑yi​)​​  ","version":"Next","tagName":"h3"},{"title":"Intercepto​","type":1,"pageTitle":"Regressão Linear Simples","url":"/docs/matematica/estatistica/regressao-linear-simples#intercepto","content":" β0=yˉ−β1xˉ\\beta_0 = \\bar{y} - \\beta_1\\bar{x}β0​=yˉ​−β1​xˉ ","version":"Next","tagName":"h3"},{"title":"Eficiência","type":0,"sectionRef":"#","url":"/docs/ux/avaliacao/eficiencia","content":"Eficiência Algumas avaliações que são relacionadas a eficiência são: medições de tempo (tempo de realização da tarefa, tempo até o erro, etc);taxa de entrada de dados;quantidade de informações acessadas;frequência de uso;desvios da solução ótima.","keywords":"","version":"Next"},{"title":"Percurso Cognitivo","type":0,"sectionRef":"#","url":"/docs/ux/avaliacao/percurso-cognitivo","content":"Percurso Cognitivo Parte do principio de que o usuário aprende a usar o produto através da exploração e não lendo manuais. Assim, é interessante para descobrir se uma interface é fácil de aprender. Trabalha com histórias de sucesso e histórias de falha. Algumas perguntas sugeridas para identificar sucesso e falha são: sendo honesto, o usuário vai tentar realizar esta ação?os controles para executar esta ação estão visíveis?há um link evidente e forte entre estes controles e a ação?o feedback é fornecido?","keywords":"","version":"Next"},{"title":"Lei de Fitt's","type":0,"sectionRef":"#","url":"/docs/ux/lei-de-fitts","content":"Lei de Fitt's A lei de Fitt's afirma que o tempo necessário para executar uma ação é uma função da distância e tamanho do componente. Quanto maior a distância e menor o tamanho do componente, mais tempo leva para que a ação seja executada.","keywords":"","version":"Next"},{"title":"Heurísticas","type":0,"sectionRef":"#","url":"/docs/ux/avaliacao/heuristicas","content":"Heurísticas O fluxo para uma avaliação com o uso de heurísticas é: Se familiarize com a lista de heurísticas.Se familiarize com a interface que vai ser avaliada.Crie uma lista de tarefas.Execute cada uma das tarefas.Avalie a interface de acordo com a lista de heurísticas.Classifique o problema de acordo com a severidade.Faça um relatório.","keywords":"","version":"Next"},{"title":"O que é Usabilidade?","type":0,"sectionRef":"#","url":"/docs/ux/o-que-e-usabilidade","content":"O que é Usabilidade? Segundo a ISO 9241-11, usabilidade é o quanto um produto pode ser utilizado por um determinado usuário para atingir um determinado objetivo com eficiência, eficácia e satisfação em determinado contexto de uso. Assim é preciso: definir um usuário;definir um contexto de uso;definir uma tarefa. Outros pontos que precisam ser definidos: Eficiência Realização da tarefa sem erros Eficácia Realização da tarefa com otimização dos recursos disponíveis. Satisfação O quanto as expectativas são alcançadas.","keywords":"","version":"Next"}],"options":{"id":"default"}}