"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6675],{6184:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>d});var a=s(75478),n=s(74848),o=s(28453);const t={title:"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework",description:"This is my first post on Docusaurus.",slug:"full-text-search-drf-postgres-django",authors:["EduardoJM"],tags:["Django","PostgreSQL","Full-Text Search"]},i=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Mostre-me o c\xf3digo",id:"mostre-me-o-c\xf3digo",level:2},{value:"Implementando o BaseFilterBackend",id:"implementando-o-basefilterbackend",level:2},{value:"Obtendo os par\xe2metros",id:"obtendo-os-par\xe2metros",level:3},{value:"Fazendo a Busca",id:"fazendo-a-busca",level:3},{value:"Usando o FullTextSearchFilter",id:"usando-o-fulltextsearchfilter",level:2},{value:"Mostrando o Rank e Similarity no retorno da API",id:"mostrando-o-rank-e-similarity-no-retorno-da-api",level:2},{value:"Mas, e sem a busca?",id:"mas-e-sem-a-busca",level:3},{value:"Filtrando por Similaridade",id:"filtrando-por-similaridade",level:2},{value:"Refer\xeancias",id:"refer\xeancias",level:2}];function c(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:["O texto ",(0,n.jsx)(r.code,{children:"Full-Text Search: Implementando com Postgres e Django"})," [1] comenta sobre a implementa\xe7\xe3o do sistema de ",(0,n.jsx)(r.em,{children:"Full-Text Search"})," do ",(0,n.jsx)(r.strong,{children:"Postgres"}),", trazido pelo Leandro Proen\xe7a no texto ",(0,n.jsx)(r.code,{children:"A powerful full-text search in PostgreSQL in less than 20 lines"})," [2], utilizando o ",(0,n.jsx)(r.strong,{children:"django"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["O projeto est\xe1 no GitHub [3] e, para complement\xe1-lo, esse texto tem por objetivo, construir um back-end de filtro, i.e. um ",(0,n.jsx)(r.em,{children:"adapter"})," de filtro, para lidar com o ",(0,n.jsx)(r.em,{children:"full-text search"}),", como no algoritmo do texto anterior dentro do ",(0,n.jsx)(r.em,{children:"rest-framework"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Pra poder adicionar esse suporte, da melhor forma poss\xedvel, podemos criar um ",(0,n.jsx)(r.em,{children:"filter back-end"})," customizado. S\xe3o utilizados, como refer\xeancia, o ",(0,n.jsx)(r.code,{children:"SearchFilter"})," original do ",(0,n.jsx)(r.strong,{children:"django"})," [4] e [5]."]}),"\n",(0,n.jsx)(r.hr,{}),"\n",(0,n.jsx)(r.h2,{id:"mostre-me-o-c\xf3digo",children:"Mostre-me o c\xf3digo"}),"\n",(0,n.jsxs)(r.p,{children:["O c\xf3digo desenvolvido nesse texto est\xe1 dispon\xedvel no reposit\xf3rio ",(0,n.jsx)(r.a,{href:"https://github.com/EduardoJM/django-full-text-search",children:"django-full-text-search"})," no Github."]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsx)(r.p,{children:"Disclaimer:"}),"\n",(0,n.jsxs)(r.p,{children:["O c\xf3digo da vers\xe3o desse texto est\xe1 dispon\xedvel na branch ",(0,n.jsx)(r.a,{href:"https://github.com/EduardoJM/django-full-text-search/tree/texto-2",children:"texto-2"}),"."]}),"\n"]}),"\n",(0,n.jsx)(r.hr,{}),"\n",(0,n.jsx)(r.h2,{id:"implementando-o-basefilterbackend",children:"Implementando o BaseFilterBackend"}),"\n",(0,n.jsxs)(r.p,{children:["Para criar o back-end de filtro, \xe9 preciso implementar a classe ",(0,n.jsx)(r.code,{children:"rest_framework.filters.BaseFilterBackend"}),":"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"from rest_framework.filters import BaseFilterBackend\n\nclass FullTextSearchFilter(BaseFilterBackend):\n    pass\n"})}),"\n",(0,n.jsx)(r.h3,{id:"obtendo-os-par\xe2metros",children:"Obtendo os par\xe2metros"}),"\n",(0,n.jsxs)(r.p,{children:["Os primeiros m\xe9todos que ser\xe3o implementados na classe acima s\xe3o apenas m\xe9todos que buscam atributos na requisi\xe7\xe3o, como o par\xe2metro ",(0,n.jsx)(r.code,{children:"?search"}),", ou no ",(0,n.jsx)(r.code,{children:"ModelViewSet"})," como, por exemplo, o ",(0,n.jsx)(r.code,{children:"search_fields"}),". Esse c\xf3digo \xe9 bem parecido com o da refer\xeancia em [5]:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"from rest_framework.filters import BaseFilterBackend\nfrom rest_framework.settings import api_settings\n\nclass FullTextSearchFilter(BaseFilterBackend):\n    search_param = api_settings.SEARCH_PARAM\n\n    def get_config(self, view, request):\n        return getattr(view, \"search_config\", None)\n\n    def get_search_fields(self, view, request):\n        return getattr(view, \"search_fields\", None)\n\n    def get_similarity_threshold(self, view, request):\n        return getattr(view, \"similarity_threshold\", 0)\n\n    def get_search_term(self, request):\n        params = request.query_params.get(self.search_param, '')\n        params = params.replace('\\x00', '')  # strip null characters\n        params = params.replace(',', ' ')\n        return params\n"})}),"\n",(0,n.jsx)(r.h3,{id:"fazendo-a-busca",children:"Fazendo a Busca"}),"\n",(0,n.jsxs)(r.p,{children:["O m\xe9todo mais importante dessa classe \xe9, sem d\xfavidas, o ",(0,n.jsx)(r.code,{children:"filter_queryset"})," que \xe9 o m\xe9todo que faz as altera\xe7\xf5es em um ",(0,n.jsx)(r.code,{children:"queryset"})," para devolver a resposta da API."]}),"\n",(0,n.jsx)(r.p,{children:"\xc9 preciso, antes de tudo, obter os par\xe2metros para fazer nossa busca, por meio dos m\xe9todos implementados acima:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"def filter_queryset(self, request, queryset, view):\n    search_fields = self.get_search_fields(view, request)\n    search_term = self.get_search_term(request)\n    config = self.get_config(view, request)\n    threshold = self.get_similarity_threshold(view, request)\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Um primeiro ponto, que deve ser levado em considera\xe7\xe3o, \xe9 que, caso a vari\xe1vel ",(0,n.jsx)(r.code,{children:"search_fields"})," ou a ",(0,n.jsx)(r.code,{children:"search_term"})," n\xe3o esteja preenchida, podemos retornar o ",(0,n.jsx)(r.code,{children:"queryset"})," sem fazer altera\xe7\xe3o:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"def filter_queryset(self, request, queryset, view):\n    # ...\n\n    if not search_term or not search_fields:\n        return queryset\n"})}),"\n",(0,n.jsx)(r.p,{children:"O restante do m\xe9todo \xe9 bem parecido com o que j\xe1 implementamos no texto anterior:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'def filter_queryset(self, request, queryset, view):\n    # ...\n\n    search_vector = SearchVector(*search_fields, config=config)\n    search_query = SearchQuery(search_term, config=config)\n\n    queryset = queryset.annotate(\n        search=search_vector,\n        rank=SearchRank(\n            search_vector,\n            search_query,\n        ),\n        similarity=TrigramSimilarity(*search_fields, search_term),\n    ).filter(\n        Q(search=search_query) | Q(similarity__gt=threshold)\n    ).order_by("-rank", "-similarity")\n\n    return queryset\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Faz-se importante denotar que o ",(0,n.jsx)(r.code,{children:"search_fields"})," aqui \xe9 usado como ",(0,n.jsx)(r.code,{children:"*search_fields"}),' para "desconstruir" o array. Assim, se ',(0,n.jsx)(r.code,{children:'search_fields = ["name", "description"]'}),", a cria\xe7\xe3o da inst\xe2ncia ",(0,n.jsx)(r.code,{children:"SearchVector"})," seria feita como ",(0,n.jsx)(r.code,{children:'SearchVector("name", "description", config=config)'}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Por fim, a classe, completa, ser\xe1:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"class FullTextSearchFilter(BaseFilterBackend):\n    search_param = api_settings.SEARCH_PARAM\n\n    def get_config(self, view, request):\n        return getattr(view, \"search_config\", None)\n\n    def get_search_fields(self, view, request):\n        return getattr(view, \"search_fields\", None)\n\n    def get_similarity_threshold(self, view, request):\n        return getattr(view, \"similarity_threshold\", 0)\n\n    def get_search_term(self, request):\n        params = request.query_params.get(self.search_param, '')\n        params = params.replace('\\x00', '')  # strip null characters\n        params = params.replace(',', ' ')\n        return params\n\n    def filter_queryset(self, request, queryset, view):\n        search_fields = self.get_search_fields(view, request)\n        search_term = self.get_search_term(request)\n        config = self.get_config(view, request)\n        threshold = self.get_similarity_threshold(view, request)\n\n        if not search_term or not search_fields:\n            return queryset\n\n        search_vector = SearchVector(*search_fields, config=config)\n        search_query = SearchQuery(search_term, config=config)\n\n        queryset = queryset.annotate(\n            search=search_vector,\n            rank=SearchRank(\n                search_vector,\n                search_query,\n            ),\n            similarity=TrigramSimilarity(*search_fields, search_term),\n        ).filter(\n            Q(search=search_query) | Q(similarity__gt=threshold)\n        ).order_by(\"-rank\", \"-similarity\")\n\n        return queryset\n"})}),"\n",(0,n.jsx)(r.hr,{}),"\n",(0,n.jsx)(r.h2,{id:"usando-o-fulltextsearchfilter",children:"Usando o FullTextSearchFilter"}),"\n",(0,n.jsxs)(r.p,{children:["A classe ",(0,n.jsx)(r.code,{children:"FullTextSearchFilter"})," pode ser utilizada nos ",(0,n.jsx)(r.code,{children:"filter_backends"})," dos ",(0,n.jsx)(r.code,{children:"ModelViewSet"})," do ",(0,n.jsx)(r.em,{children:"django-rest-framework"}),". Simplificando:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'from rest_framework import serializers\nfrom rest_framework.viewsets import ModelViewSet\nfrom texto.models import Singer\nfrom core.filters import FullTextSearchFilter\n\nclass SingerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Singer\n        fields = "__all__"\n\nclass SingerViewSet(ModelViewSet):\n    queryset = Singer.objects.all()\n    serializer_class = SingerSerializer\n    filter_backends = [FullTextSearchFilter]\n    search_config = "portuguese"\n    search_fields = ["name"]\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Ao registrar o ",(0,n.jsx)(r.code,{children:"SingerViewSet"})," nas ",(0,n.jsx)(r.code,{children:"urls"})," do projeto j\xe1 \xe9 poss\xedvel fazer chamadas para o ",(0,n.jsx)(r.em,{children:"endpoint"})," utilizando o ",(0,n.jsx)(r.code,{children:"?search"})," como ",(0,n.jsx)(r.em,{children:"full-text search"}),":"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'from django.urls import path, include\nfrom rest_framework.routers import SimpleRouter\nfrom .viewsets import SingerViewSet\n\nrouter = SimpleRouter()\nrouter.register("singer", SingerViewSet, "Singer")\n\nurlpatterns = [\n    path(\'api/\', include(router.urls))\n]\n'})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"Exemplo de chamada para a API com ?search=Marrone e mostrando os resultados filtrados e ordenados de modo correto",src:s(18038).A+"",width:"684",height:"627"})}),"\n",(0,n.jsx)(r.hr,{}),"\n",(0,n.jsx)(r.h2,{id:"mostrando-o-rank-e-similarity-no-retorno-da-api",children:"Mostrando o Rank e Similarity no retorno da API"}),"\n",(0,n.jsxs)(r.p,{children:["\xc9 poss\xedvel, inclusive, exibir os dados de ",(0,n.jsx)(r.code,{children:"rank"})," e ",(0,n.jsx)(r.code,{children:"similarity"})," no retorno da API. Como esses dados est\xe3o sendo anotados, i.e. acrescentados, na entidade, \xe9 poss\xedvel, apenas, alterar o ",(0,n.jsx)(r.code,{children:"ModelSerializer"}),":"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class SingerSerializer(serializers.ModelSerializer):\n    rank = serializers.FloatField(read_only=True)\n    similarity = serializers.FloatField(read_only=True)\n\n    class Meta:\n        model = Singer\n        fields = "__all__"\n'})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"Exemplo de chamada para a API com ?search=Marrone e mostrando os resultados com os campos rank e similarity sendo exibidos",src:s(49805).A+"",width:"504",height:"618"})}),"\n",(0,n.jsx)(r.h3,{id:"mas-e-sem-a-busca",children:"Mas, e sem a busca?"}),"\n",(0,n.jsxs)(r.p,{children:["Acrescentar, apenas, o ",(0,n.jsx)(r.code,{children:"rank"})," e ",(0,n.jsx)(r.code,{children:"similarity"})," no ",(0,n.jsx)(r.code,{children:"ModelSerializer"})," traz um problema: quando o ",(0,n.jsx)(r.em,{children:"endpoint"})," \xe9 chamado sem o ",(0,n.jsx)(r.code,{children:"?search"})," os dados de ",(0,n.jsx)(r.code,{children:"rank"})," e ",(0,n.jsx)(r.code,{children:"similarity"})," n\xe3o s\xe3o retornados:"]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"Exemplo de retorno da API sem utilizar o par\xe2metro ?search na URL e que os itens s\xe3o retornados sem o campo rank e similarity",src:s(86564).A+"",width:"439",height:"620"})}),"\n",(0,n.jsxs)(r.p,{children:["Isso pode ser resolvido, acrescentando, no construtor do FloatField, o par\xe2metro ",(0,n.jsx)(r.code,{children:"default=0"}),":"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class SingerSerializer(serializers.ModelSerializer):\n    rank = serializers.FloatField(read_only=True, default=0)\n    similarity = serializers.FloatField(read_only=True, default=0)\n\n    class Meta:\n        model = Singer\n        fields = "__all__"\n'})}),"\n",(0,n.jsx)(r.hr,{}),"\n",(0,n.jsx)(r.h2,{id:"filtrando-por-similaridade",children:"Filtrando por Similaridade"}),"\n",(0,n.jsxs)(r.p,{children:["Por fim, para filtrar por similaridade, \xe9 poss\xedvel definir a vari\xe1vel ",(0,n.jsx)(r.code,{children:"similarity_threshold"})," no ",(0,n.jsx)(r.code,{children:"ModelViewSet"}),":"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class SingerViewSet(ModelViewSet):\n    queryset = Singer.objects.all()\n    serializer_class = SingerSerializer\n    filter_backends = [FullTextSearchFilter]\n    search_config = "portuguese"\n    search_fields = ["name"]\n    similarity_threshold = 0.3\n'})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"Exemplo de chamada para a API com ?search=Bruninho exibindo apenas os itens com o campo &quot;similarity&quot; maior que 0.3",src:s(86755).A+"",width:"469",height:"512"})}),"\n",(0,n.jsx)(r.hr,{}),"\n",(0,n.jsx)(r.h2,{id:"refer\xeancias",children:"Refer\xeancias"}),"\n",(0,n.jsxs)(r.p,{children:["[1] ",(0,n.jsx)(r.a,{href:"https://dev.to/eduardojm/full-text-search-implementando-com-postgres-e-django-kmf",children:"Full-Text Search: Implementando com Postgres e Django"})]}),"\n",(0,n.jsxs)(r.p,{children:["[2] ",(0,n.jsx)(r.a,{href:"https://leandronsp.com/a-powerful-full-text-search-in-postgresql-in-less-than-20-lines",children:"A powerful full-text search in PostgreSQL in less than 20 lines"})]}),"\n",(0,n.jsxs)(r.p,{children:["[3] ",(0,n.jsx)(r.a,{href:"https://github.com/EduardoJM/django-full-text-search",children:"django-full-text-search"})]}),"\n",(0,n.jsxs)(r.p,{children:["[4] ",(0,n.jsx)(r.a,{href:"https://www.django-rest-framework.org/api-guide/filtering/#searchfilter",children:"Filtering - SearchFilter"})]}),"\n",(0,n.jsxs)(r.p,{children:["[5] ",(0,n.jsx)(r.a,{href:"https://github.com/encode/django-rest-framework/blob/master/rest_framework/filters.py#L39",children:"rest_framework/filters.py"})]}),"\n",(0,n.jsx)(r.hr,{}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://unsplash.com/pt-br/fotografias/ehyV_XOZ4iA",children:"Foto de Capa por Douglas Lopes no Unsplash"})})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},18038:(e,r,s)=>{s.d(r,{A:()=>a});const a=s.p+"assets/images/full_text_5-a3a32da72ef4d61b1522063e8f44224d.png"},49805:(e,r,s)=>{s.d(r,{A:()=>a});const a=s.p+"assets/images/full_text_6-eaf2b60fefa698f0bdfb932a668df2ae.png"},86564:(e,r,s)=>{s.d(r,{A:()=>a});const a=s.p+"assets/images/full_text_7-83d652c002acc961e946249dc4341090.png"},86755:(e,r,s)=>{s.d(r,{A:()=>a});const a=s.p+"assets/images/full_text_8-067e867c028e3bafbcd4f535f290780b.png"},28453:(e,r,s)=>{s.d(r,{R:()=>t,x:()=>i});var a=s(96540);const n={},o=a.createContext(n);function t(e){const r=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),a.createElement(o.Provider,{value:r},e.children)}},75478:e=>{e.exports=JSON.parse('{"permalink":"/blog/full-text-search-drf-postgres-django","source":"@site/blog/2023-04-22-full-text-search-django-drf-postgres/index.md","title":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","description":"This is my first post on Docusaurus.","date":"2023-04-22T00:00:00.000Z","tags":[{"inline":true,"label":"Django","permalink":"/blog/tags/django"},{"inline":true,"label":"PostgreSQL","permalink":"/blog/tags/postgre-sql"},{"inline":true,"label":"Full-Text Search","permalink":"/blog/tags/full-text-search"}],"readingTime":4.925,"hasTruncateMarker":true,"authors":[{"name":"Eduardo Oliveira","title":"Co-creator of Docusaurus 1","url":"https://github.com/EduardoJM","email":"eduardo_y05@outlook.com","page":null,"socials":{"github":"https://github.com/EduardoJM","bluesky":"https://bsky.app/profile/goticodocalypso.dev"},"imageURL":"https://github.com/EduardoJM.png","key":"EduardoJM"}],"frontMatter":{"title":"Full-Text Search: Criando um Back-End de Filtro para o Django Rest-Framework","description":"This is my first post on Docusaurus.","slug":"full-text-search-drf-postgres-django","authors":["EduardoJM"],"tags":["Django","PostgreSQL","Full-Text Search"]},"unlisted":false,"prevItem":{"title":"Django, Htmx e React: usando HTMX para al\xe9m de TODO-Lists","permalink":"/blog/django-htmx-react-alem-de-todo-lists"},"nextItem":{"title":"Full-Text Search: Implementando com Postgres e Django","permalink":"/blog/full-text-search-postgres-django"}}')}}]);