"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[39],{7282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(5893),s=n(1151);const o={},a="Fun\xe7\xf5es Puras",i={id:"funcoes-puras",title:"Fun\xe7\xf5es Puras",description:"Pure functions are functions that respect immutability, do not perform any side effects, and return the same output given the same parameters.",source:"@site/docs/funcoes-puras.md",sourceDirName:".",slug:"/funcoes-puras",permalink:"/docs/funcoes-puras",draft:!1,unlisted:!1,editUrl:"https://github.com/EduardoJM/EduardoJM.github.io/tree/main/docs/funcoes-puras.md",tags:[],version:"current",lastUpdatedBy:"Eduardo Oliveira",lastUpdatedAt:1712852616,formattedLastUpdatedAt:"11 de abr. de 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data Drift e Concept Drift",permalink:"/docs/dados/data-drif"},next:{title:"Don't Repeat Yourself",permalink:"/docs/patterns/dry"}},u={},c=[{value:"Refer\xeancia",id:"refer\xeancia",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",h1:"h1",h2:"h2",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"fun\xe7\xf5es-puras",children:"Fun\xe7\xf5es Puras"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"Pure functions are functions that respect immutability, do not perform any side effects, and return the same output given the same parameters."}),"\n"]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"Fun\xe7\xf5es puras s\xe3o fun\xe7\xf5es que respeitam a imutabilidade, n\xe3o performam nenhum efeito colateral, e retornam o mesmo resultado dados os mesmos par\xe2metros."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"refer\xeancia",children:"Refer\xeancia"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://dev.to/cherryramatis/ending-the-war-or-continuing-it-lets-bring-functional-programming-to-oop-codebases-3mhd",children:"Cherry Ramatis - Ending the war or continuing it? Let's bring functional programming to OOP codebases"})})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>a});var r=n(7294);const s={},o=r.createContext(s);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);